---
title: "centile estimation"
format: dashboard
server: shiny
---

# Centile Estimation

```{r}
#| label: load-packages
#| warning: false
#| message: false
#| output: false
#| context: setup

library(ggplot2)
library(shiny)
library(tidyverse)
library(gamlss)
library(rlist)
```

```{r}
demog_thick_combos <- read.csv("/Users/nicholezhang/Downloads/ABCD_REU/demog_thick_combos.csv") |> 
  select(-X) 
demog_area_combos <- read.csv("/Users/nicholezhang/Downloads/ABCD_REU/demog_area_combos.csv") |> 
  select(-X)

```



## {.sidebar}

```{r}
#| panel: sidebar 

selectInput(inputId = "phenotype", 
            label = "Phenotype", 
            choices = c("Cortical Thickness", "Cortical Surface Area"))

selectInput(inputId = "hemi", 
            label = "Hemisphere", 
            choices = c("left", "right", "both"), 
            selected = c("both"))

selectInput(inputId = "region", 
            label = "Area of Brain", 
            choices = c(unique(demog_thick_combos$region)), 
            selected = "all")

checkboxGroupInput(inputId = "centiles", 
            label = "Centile Selections", 
            choices = c(0.4, 2, 2.5, 10, 25, 50, 75, 90, 97.5, 98, 99.6), 
            selected = c(2.5, 50, 97.5))


selectInput(inputId = "race", 
            label = "Race", 
            choices = c("White", "Black", "Hispanic", "Asian", "Other", "All"), 
            selected = "All")

selectInput(inputId = "sex", 
            label = "Sex", 
            choices = c("Male", "Female"), 
            selected = "Female")



```


## {.row}
## Row { height = 20%}

### Column {width = 25%}

**Note: Gaps in centile curves represent ages (by months) for which we don't have data. Leave values for which you don't have data as 0. 

```{r}


dateInput(inputId = "birthday", 
          label = "Date of Birth (yyyy/mm/dd)")


```

### Column {width = 25%}

```{r}

dateInput(inputId = "baseline_date", 
          label = "Date of Baseline Visit")

numericInput(inputId = "baseline_input", 
             label = "Baseline Value (mm)", 
             value = 0)
```

### Column {width = 25%}
```{r}


#2year followup 

dateInput(inputId = "year2_date", 
          label = "Date of Year 2 Follow-up")

numericInput(inputId = "year2_input", 
             label = "Year 2 Value (mm)", 
             value = 0)


```

### Column {width = 25%}
```{r}

#4 year followup

dateInput(inputId = "year4_date", 
          label = "Date of Year 4 Follow-up")

numericInput(inputId = "year4_input", 
             label = "Year 4 Value (mm)", 
             value = 0)

```




## Row {height = 80%}

```{r}

plotOutput("ctplot")
```






```{r}
#| context: server

#read in thickness data 

demog_thick_combos <- read.csv("/Users/nicholezhang/Downloads/ABCD_REU/demog_thick_combos.csv") |> 
  select(-X) 

thickness_df <- data.frame(read.csv("/Users/nicholezhang/Downloads/ABCD_REU/full_thickness_df.csv")) |> 
  select(-X) |> 
  rename_with(~ sub('^X', '', .))

load("/Users/nicholezhang/Downloads/ABCD_REU/thickness_parameters.RData")



# load all of the area data 

demog_area_combos <- read.csv("/Users/nicholezhang/Downloads/ABCD_REU/area_demog_brain_combos.csv") |> 
  select(-X) 

area_df <- read.csv("~/Downloads/ABCD_REU/full_area_df.csv") |> 
  select(-X) |> 
  rename_with(~ sub('^X', '', .))

load("/Users/nicholezhang/Downloads/ABCD_REU/area_parameters.RData")

elapsed_months <- function(end_date, start_date) {
    ed <- as.POSIXlt(end_date)
    sd <- as.POSIXlt(start_date)
    12 * (ed$year - sd$year) + (ed$mon - sd$mon)
}



#function to make centile curves
draw_centiles <- function(race_input, sex_input, hemisphere_input, region_input, centiles_input, phenotype_input){ 
  
  #define dataframe based on phenotype input 
  working_df <- if(phenotype_input == "Cortical Thickness"){ 
    thickness_df
  } else { 
    area_df
      }

  
  #get df for region/group that we want 
  curr_df <- working_df |> filter(race == race_input, sex == sex_input, region == region_input) |> 
    pivot_longer(cols = c(`107`:`189`), names_to = "interview_age", values_to = "thickness") |> 
    filter(centile %in% as.vector(centiles_input)) |> 
    mutate(interview_age = as.numeric(interview_age), 
           centile = as.factor(centile), 
           hemisphere = as.factor(hemisphere)) 
  
    #provision for hemispheres
  if(hemisphere_input %in% c("right", "left") | region_input == "all"){ 
    curr_df <- curr_df |> filter(hemisphere == hemisphere_input)
    hemi_legend <- "none"}  else { hemi_legend <- NULL}
  
  #initialize ggplot object
  gg <- ggplot(data = curr_df) 
  
  #now add for every centile we wanna plot 
  
  gg <- gg + geom_line(aes(x = interview_age, y = thickness, color = centile, 
                           linetype = hemisphere), linewidth = 1.45)
    
  title <- if(race_input == "Other"){
    paste("Centile Curves for", sex_input, "Adolescents whose Race is not Listed (??)")
  } else {
    paste("Centile Curves for", race_input, sex_input, "Adolescents")
  }
  
  
  gg <- gg + 
    theme_minimal() + 
    labs(title = title)  + 
    scale_color_manual(values = c(`0.4` = "#A30015", `2` = "#E97451", `2.5` = "#FFD700", 
                                  `10` = "#379634", `25` = "#124019", `50` = "#11686A",
                                  `75` = "#08A4BD", `90` = "#C185B2", `97.5` = '#B91372', `98` = '#63264A', 
                                 `99.6` = '#E2B4BD')) + 
    theme(legend.position = "bottom") + 
    theme(plot.title = element_text(face = "italic", size = 18), 
          axis.title = element_text(size = 15), 
          axis.text = element_text(size = 13), 
          legend.text = element_text(size = 13), 
          legend.title = element_text(size = 15)) + 
    guides(linetype = hemi_legend) + 
    scale_x_continuous(breaks = c(108,120,132,144, 156, 168,180),
                     labels = c(9,10,11,12,13,14,15)) + 
    xlab("Adolescent Age (Years)") + 
    ylab("Cortical Thickness (mm)") 
  
  
  return(gg)
  
}




#function to calculate centile values

calculate_centile <- function(race_input, sex_input, age_input, region_input, hemisphere_input, 
                              thickness_input, phenotype_input){ 
  
  demog_brain_combos <- if(phenotype_input == "Cortical Thickness"){ 
    demog_thick_combos
  } else {
      demog_area_combos
    }
  

  
  phenotype_parameters <- if(phenotype_input == "Cortical Thickness"){ 
    thickness_parameters } 
  else { area_parameters}
  
  pfun <- if(phenotype_input == "Cortical Thickness") { 
    "pBCTo"} else { "pBCPEo"}
  
    # need to make provision for if user is looking at both hemispheres (and not at the full brain)
  if(!(hemisphere_input == "right" | hemisphere_input == "left") & region_input != "all") { 
    
    indices <- which(demog_brain_combos$sex == sex_input & demog_brain_combos$race_ethnicity == race_input 
                     & demog_brain_combos$region == region_input)
    
    #c(left hemi, right hemi)
    parameters_df <- list(phenotype_parameters[[indices[1]]], phenotype_parameters[[indices[2]]])
    
   } else { 
      
     index <- which(demog_brain_combos$sex == sex_input & demog_brain_combos$race_ethnicity == race_input 
                 & demog_brain_combos$region == region_input & demog_brain_combos$hemisphere == hemisphere_input)
  
    parameters_df <- list(phenotype_parameters[[index]])
    
    }
  
  
  #if we don't have parameters for the age input round down to the nearest age we do have parameters for 
  if(!(age_input %in% as.vector(parameters_df[[1]]$x))){
    age_index <- which(abs(as.vector(parameters_df[[1]]$x) - age_input) == 
                           min(abs((parameters_df[[1]]$x - age_input))))
    
    age_input <- min(parameters_df[[1]]$x[age_index])
  } 
  
  #get index for specific age 
  age_index <- which(parameters_df[[1]]$x == age_input)
  
  final_centiles <- c()
  for(index in 1:length(parameters_df)){ 
    curr_param_df <- parameters_df[[index]]
    mu <- curr_param_df$mu[age_index]
    sigma <- curr_param_df$sigma[age_index] 
    nu <- curr_param_df$nu[age_index]
    tau <- curr_param_df$tau[age_index]
    
    curr_centile <- call(pfun, 
                         q = thickness_input, mu = mu, sigma = sigma, nu = nu, tau = tau)
    curr_centile <- eval(curr_centile)
    curr_centile <- round(curr_centile, digits = 5)
    final_centiles[index] <- curr_centile*100
    
    }
  
  
  return(final_centiles)
  
}



output$ctplot <- renderPlot({ 
  
  
  #initialize stuff
  timepoints <- c("baseline", "year 2", "year 4")
  values <- c(input$baseline_input, input$year2_input, input$year4_input)
  
  #define age in months
  
  baseline_age_input <- elapsed_months(input$baseline_date, input$birthday)
  year2_age <- elapsed_months(input$year2_date, input$birthday) 
  year4_age <- elapsed_months(input$year4_date, input$birthday)
  ages <- c(baseline_age_input, year2_age, year4_age)
  
  #extract the ages + centiles + values for which we will be calculating 
  
  value_indices <- as.vector(which(values != 0))
  timepoints <- timepoints[value_indices]
  values_calc <- values[value_indices]
  ages_calc <- ages[value_indices]
  race <- input$race 
  sex <- input$sex 
  region <- input$region 
  hemi <- input$hemi
  phenotype <- input$phenotype
  
  if(!(hemi %in% c("left", "right")) & region != "all"){ 
    hemi_labels <- c("left", "right")} else { hemi_labels <- NULL}
  
  #provisions for diff plot sizes 
  
  label_spacer <- if(phenotype == "Cortical Thickness") { 
    c(0.1, -0.1) } else if (phenotype == "Cortical Surface Area" & region != "all") { c(100, -100) 
      } else {c(10000, -10000)}
  
  
  #base centile plot 
  gg <- draw_centiles(race_input = race, sex_input = sex, hemisphere_input = hemi, 
                      region_input = region, centiles_input = input$centiles, phenotype_input = phenotype)
  
  
  #define centiles and round them to four digits and put them in a list 
  #if we're calculating both hemispheres then we want to do this for 
  centile_values <- c()
  
  if(length(value_indices) != 0){ 

  for(i in 1:length(value_indices)){ 
    curr_centile <- calculate_centile(race_input = race, sex_input = sex, age_input = ages_calc[i], 
                                      region_input = region, hemisphere_input = hemi, thickness_input = values_calc[i],
                                      phenotype_input = phenotype)
    curr_centile <- round(curr_centile, digits = 4)
    centile_values[[i]] <- curr_centile
    
    }
  
  # if we get both hemispheres it looks like  c([0.34, 1.290], [94, 32])
  
   
  #add user points & centile estimates to the plot 

  for(i in 1:length(value_indices)){ 
    timepoint <- timepoints[i]
    curr_centile <- centile_values[[i]]
    
    gg <- gg + annotate("point", x = ages_calc[i], y = values_calc[i], size = 3, color = "#05668D")
    
    #default is for the left centile label to be displayed above the right one
    #but if the left centile value is bigger it means that the left curve is below the right one so switch it to the bottom 
    if(length(curr_centile) > 1 & curr_centile[1] > curr_centile[2]){ 
      label_spacer <- list.reverse(label_spacer)}
    
    for(hemi_index in 1:length(hemi_labels)){ 

        gg <- gg + annotate("label", x = ages_calc[i], y = values_calc[i] + label_spacer[hemi_index], size = 5,
                        label = (paste(timepoint, hemi_labels[hemi_index], "centile:", "\n", curr_centile[hemi_index])))
      
      }
    
  }
    
    # and line segments connecting the points if we have 2+ points 
    if(length(value_indices) > 1){
    for(i in 1:length(value_indices)-1){
      gg <- gg + annotate("segment", x = ages_calc[i], y = values_calc[i], 
                                     xend = ages_calc[i+1], yend = values_calc[i+1], color = "#4C4B63", size = 1.25, linetype = 3)
      
    }
    }
    
    }
  

  
  gg
  
  })






```







