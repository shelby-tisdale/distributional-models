---
title: "model_calculations"
format: html
editor: visual
---

# load packages + data 

```{r}
#| label: load-packages 

library(tidyverse)
library(gamlss)
library(ggseg)
library(grid)
library(gridExtra)
library(gamlss.ggplots)
library(plotly)
library(grid)
library(patchwork)
library(stringr)


```

```{r}
#| label: load-data 




data_dir <- "/Users/nicholezhang/Library/CloudStorage/Box-Box/ABCD Tabulated Data/5.1/core"

setwd(data_dir)

# LOAD DATA
# Demographic variables and propensity weights
demog <- read.csv("abcd-general/abcd_p_demo.csv", na.strings = c(999, 777))
# Age in months, Site ID (ABCD Study Design Variables), Family ID
study_covars <- read.csv("abcd-general/abcd_y_lt.csv")


# desikan atlas, cortical thickness
dat.mri = read.csv('imaging/mri_y_smr_thk_dsk.csv')
# desikan atlas, cortical surface area
dat.mri.area = read.csv('imaging/mri_y_smr_area_dsk.csv')


demog_clean <- demog |>
  # filter for events of interest
  filter(eventname %in% c("baseline_year_1_arm_1", "2_year_follow_up_y_arm_1",
                          "4_year_follow_up_y_arm_1")) |>
  # select broad demographics
  select(src_subject_id, eventname, starts_with("demo_brthdat_v2"), demo_sex_v2, race_ethnicity) |>
  mutate(
    # clean age variable
    age = case_when(
      eventname == "baseline_year_1_arm_1" ~ trunc(demo_brthdat_v2), # remove decimals 
      eventname %in% c("2_year_follow_up_y_arm_1", "4_year_follow_up_y_arm_1") ~
        trunc(demo_brthdat_v2_l)),
    # broad race/ethnicity categories
    # will disaggregate in final analysis
    race_ethnicity = case_match(
      race_ethnicity,
      1 ~ "White",
      2 ~ "Black",
      3 ~ "Hispanic",
      4 ~ "Asian",
      5 ~ "Other"
    ),
    # recode sex variable
    sex = factor(demo_sex_v2),
    sex = fct_recode(
      sex,
      "Male" = "1",
      "Female" = "2",
      "Intersex-Male" = "3"
    ))


#make full dataset for modeling 
comb <- dat.mri |> 
  full_join(dat.mri.area, by = join_by("eventname", "src_subject_id")) |> 
  right_join(demog_clean, by = join_by("eventname", 'src_subject_id')) |> 
  left_join(study_covars, by = join_by("eventname", 'src_subject_id')) |>
  group_by(src_subject_id) |>
  filter(age < 16 & age > 8) |>
  mutate(interview_age = as.numeric(interview_age)) |> 
  mutate(sex = first(na.omit(sex)),
         race_ethnicity = first(na.omit(race_ethnicity)), 
         src_subject_id = factor(src_subject_id),
         site_id_l = factor(site_id_l),
         race_ethnicity = factor(race_ethnicity)) |> 
  ungroup()



```

# modeling! 

## subset data

```{r}
#| label: subset-data 


comb <- comb |> 
  filter(sex != "Intersex-Male") |> 
  mutate(sex = factor(sex)) |> 
  filter(!is.na(race_ethnicity))


subset_data <- function(
    # full dataset
    comb,
    # xvariable
    xcol,
    # yvariable
    ycol,
    # first variable to filter by
    filter_var1 = NULL,
    # value of first variable to filter for
    filter_val1 = NULL,
    # second variable to filter by
    filter_var2 = NULL,
    # value of second variable to filter for
    filter_val2 = NULL
) {
  
  if(filter_val2 == "All") {
    filter_var2 = NULL
    filter_val2 = NULL
  }
  
    # subset data
  if(!is.null(filter_var1) & !is.null(filter_val1) & is.null(filter_var2) & is.null(filter_var2)) {
    data_subset <- subset(
      comb, comb[[filter_var1]] == filter_val1)
  }
  if(!is.null(filter_var2) & !is.null(filter_var2)) {
    data_subset <- subset(
      comb, comb[[filter_var1]] == filter_val1 & comb[[filter_var2]] == filter_val2)
    
  }
  if(is.null(filter_var1) & is.null(filter_val1) & is.null(filter_var2) & is.null(filter_var2)) {
    data_subset <- comb
  }
  

  
  # creates xvar and yvar columns in dataset
  data_subset$xvar <- data_subset[[xcol]]
  data_subset$yvar <- data_subset[[ycol]]
  
  data_subset <- data_subset |> 
    dplyr::select(src_subject_id, site_id_l, interview_age, 
                  xvar, yvar, race_ethnicity, sex) |> 
    filter(!is.na(yvar))
  
  return(data_subset) 
  }


#demographic combos to model 
demog_combos <- comb |>
  expand(sex, race_ethnicity)
demog_combos <- as.matrix(demog_combos)


male_all <- c("Male", "All")
female_all <- c("Female", "All")

demog_combos <- rbind(demog_combos, male_all, female_all)
sex <- demog_combos$sex
race_ethnicity <- demog_combos$race_ethnicity




```

### thickness data 

```{r}
#| label: thickness-data-subsets

thickness_regions <- colnames(dat.mri[3:ncol(dat.mri)])

demog_thick_combos <- expand.grid(
  sex = demog_combos$sex,
  race_ethnicity = demog_combos$race_ethnicity,
  brain_location = thickness_regions) |>
  mutate(sex = factor(sex),
         race_ethnicity = factor(race_ethnicity),
         brain_location = factor(brain_location)) |>
  distinct()

demog_thick_combos <- as.data.frame(demog_thick_combos) |> 
    mutate(hemisphere = case_when( 
                                 grepl("lh", brain_location) ~ "left", 
                                 grepl("rh", brain_location) ~ "right", 
                                 .default = "both"),
        region = factor(brain_location), 
         region = fct_collapse(region, 
                               "pericalcarine" = c("smri_thick_cdk_pericclh", 
                                                       "smri_thick_cdk_periccrh"), 
                               "caudal anterior cingulate" = c("smri_thick_cdk_cdacatelh", 
                                                               "smri_thick_cdk_cdacaterh"), 
                               "caudal middle frontal" = c("smri_thick_cdk_cdmdfrlh", 
                                                           "smri_thick_cdk_cdmdfrrh"), 
                               "cuneus" = c("smri_thick_cdk_cuneuslh", 
                                            "smri_thick_cdk_cuneusrh"), 
                               "entorhinal" = c("smri_thick_cdk_ehinallh", 
                                                "smri_thick_cdk_ehinalrh"), 
                               "fusiform" = c("smri_thick_cdk_fusiformlh", 
                                              "smri_thick_cdk_fusiformrh"), 
                               "inferior parietal" = c("smri_thick_cdk_ifpllh", 
                                                       "smri_thick_cdk_ifplrh"),
                               "isthmus cingulate" = c("smri_thick_cdk_ihcatelh", 
                                                       "smri_thick_cdk_ihcaterh"), 
                               "lateral occipital" = c("smri_thick_cdk_locclh", 
                                                       "smri_thick_cdk_loccrh"), 
                               "lateral orbitofrontal" = c("smri_thick_cdk_lobfrlh", 
                                                           "smri_thick_cdk_lobfrrh"), 
                               "lingual" = c("smri_thick_cdk_linguallh", 
                                             "smri_thick_cdk_lingualrh"), 
                               "medial orbitofrontal" = c("smri_thick_cdk_mobfrlh", 
                                                          "smri_thick_cdk_mobfrrh"), 
                               "middle temporal" = c("smri_thick_cdk_mdtmlh", 
                                                     "smri_thick_cdk_mdtmrh"), 
                               "parahippocampal" = c("smri_thick_cdk_parahpallh", 
                                                     "smri_thick_cdk_parahpalrh"), 
                               "paracentral" = c("smri_thick_cdk_paracnlh", 
                                                 "smri_thick_cdk_paracnrh"), 
                               "pars opercularis" = c("smri_thick_cdk_parsopclh", 
                                                      "smri_thick_cdk_parsopcrh"), 
                               "pars orbitalis" = c("smri_thick_cdk_parsobislh", 
                                                    "smri_thick_cdk_parsobisrh"), 
                               "pars triangularis" = c("smri_thick_cdk_parstgrislh", 
                                                       "smri_thick_cdk_parstgrisrh"), 
                               "pericalcarine" = c("smri_thick_cdk_pericclh", 
                                                   "smri_thick_cdk_periccrh"), 
                               "postcentral" = c("smri_thick_cdk_postcnlh",
                                                 "smri_thick_cdk_postcnrh"), 
                               "posterior cingulate" = c("smri_thick_cdk_ptcatelh", 
                                                         "smri_thick_cdk_ptcaterh"), 
                               "precentral" = c("smri_thick_cdk_precnlh", 
                                                "smri_thick_cdk_precnrh"), 
                               "precuneus" = c("smri_thick_cdk_pclh", 
                                               "smri_thick_cdk_pcrh"), 
                               "rostral anterior cingulate" = c("smri_thick_cdk_rracatelh", 
                                                                "smri_thick_cdk_rracaterh"), 
                               "rostral middle frontal" = c("smri_thick_cdk_rrmdfrlh", 
                                                            "smri_thick_cdk_rrmdfrrh"), 
                               "superior frontal" = c("smri_thick_cdk_sufrlh", 
                                                      "smri_thick_cdk_sufrrh"), 
                               "superior parietal" = c("smri_thick_cdk_supllh", 
                                                       "smri_thick_cdk_suplrh"), 
                               "superior temporal" = c("smri_thick_cdk_sutmlh", 
                                                       "smri_thick_cdk_sutmrh"), 
                               "supramarginal" = c("smri_thick_cdk_smlh", 
                                                   "smri_thick_cdk_smrh"), 
                               "frontal pole" = c("smri_thick_cdk_frpolelh", 
                                                  "smri_thick_cdk_frpolerh"), 
                               "temporal pole" = c("smri_thick_cdk_tmpolelh", 
                                                   "smri_thick_cdk_tmpolerh"), 
                               "transverse temporal" = c("smri_thick_cdk_trvtmlh", 
                                                         "smri_thick_cdk_trvtmrh"), 
                               "insula" = c("smri_thick_cdk_insulalh", 
                                            "smri_thick_cdk_insularh"), 
                               "inferior temporal" = c("smri_thick_cdk_iftmlh", 
                                                       "smri_thick_cdk_iftmrh"),
                               "bankssts" = c("smri_thick_cdk_banksstslh", 
                                              "smri_thick_cdk_banksstsrh"),
                               
                               other_level = 'all'))


write.csv(demog_thick_combos, file = "~/Downloads/ABCD_REU/demog_thick_combos.csv")


data_list <- list()
for(row in 1:nrow(demog_thick_combos)) {
  
  my_ycol <- demog_thick_combos[row,3]
  
  data_list[[row]] = subset_data(
    comb,
    xcol = "interview_age",
    ycol = my_ycol,
    filter_var1 = "sex",
    filter_val1 = demog_thick_combos[row, 1],
    filter_var2 = "race_ethnicity",
    filter_val2 = demog_thick_combos[row, 2])
}



```

### surface area data 

```{r}
#| label: surface-area-data 


surface_area_regions <- colnames(dat.mri.area[3:ncol(dat.mri.area)])

demog_area_combos <- expand.grid(
  sex = demog_combos$sex,
  race_ethnicity = demog_combos$race_ethnicity,
  brain_location = surface_area_regions) |>
  mutate(sex = factor(sex),
         race_ethnicity = factor(race_ethnicity),
         brain_location = factor(brain_location)) |>
  distinct()

demog_area_combos <- as.matrix(demog_area_combos)

demog_area_combos <- data.frame(demog_area_combos) |> 
  mutate(hemisphere = case_when( 
                                 grepl("lh", brain_location) ~ "left", 
                                 grepl("rh", brain_location) ~ "right", 
                                 .default = "both"),
         region = as.factor(brain_location), 
         region = fct_collapse(region, 
                               "pericalcarine" = c("smri_area_cdk_pericclh", 
                                                       "smri_area_cdk_periccrh"), 
                               "caudal anterior cingulate" = c("smri_area_cdk_cdacatelh", 
                                                               "smri_area_cdk_cdacaterh"), 
                               "caudal middle frontal" = c("smri_area_cdk_cdmdfrlh", 
                                                           "smri_area_cdk_cdmdfrrh"), 
                               "cuneus" = c("smri_area_cdk_cuneuslh", 
                                            "smri_area_cdk_cuneusrh"), 
                               "entorhinal" = c("smri_area_cdk_ehinallh", 
                                                "smri_area_cdk_ehinalrh"), 
                               "fusiform" = c("smri_area_cdk_fusiformlh", 
                                              "smri_area_cdk_fusiformrh"), 
                               "inferior parietal" = c("smri_area_cdk_ifpllh", 
                                                       "smri_area_cdk_ifplrh"),
                               "isthmus cingulate" = c("smri_area_cdk_ihcatelh", 
                                                       "smri_area_cdk_ihcaterh"), 
                               "lateral occipital" = c("smri_area_cdk_locclh", 
                                                       "smri_area_cdk_loccrh"), 
                               "lateral orbitofrontal" = c("smri_area_cdk_lobfrlh", 
                                                           "smri_area_cdk_lobfrrh"), 
                               "lingual" = c("smri_area_cdk_linguallh", 
                                             "smri_area_cdk_lingualrh"), 
                               "medial orbitofrontal" = c("smri_area_cdk_mobfrlh", 
                                                          "smri_area_cdk_mobfrrh"), 
                               "middle temporal" = c("smri_area_cdk_mdtmlh", 
                                                     "smri_area_cdk_mdtmrh"), 
                               "parahippocampal" = c("smri_area_cdk_parahpallh", 
                                                     "smri_area_cdk_parahpalrh"), 
                               "paracentral" = c("smri_area_cdk_paracnlh", 
                                                 "smri_area_cdk_paracnrh"), 
                               "pars opercularis" = c("smri_area_cdk_parsopclh", 
                                                      "smri_area_cdk_parsopcrh"), 
                               "pars orbitalis" = c("smri_area_cdk_parsobislh", 
                                                    "smri_area_cdk_parsobisrh"), 
                               "pars triangularis" = c("smri_area_cdk_parstgrislh", 
                                                       "smri_area_cdk_parstgrisrh"), 
                               "pericalcarine" = c("smri_area_cdk_pericclh", 
                                                   "smri_area_cdk_periccrh"), 
                               "postcentral" = c("smri_area_cdk_postcnlh",
                                                 "smri_area_cdk_postcnrh"), 
                               "posterior cingulate" = c("smri_area_cdk_ptcatelh", 
                                                         "smri_area_cdk_ptcaterh"), 
                               "precentral" = c("smri_area_cdk_precnlh", 
                                                "smri_area_cdk_precnrh"), 
                               "precuneus" = c("smri_area_cdk_pclh", 
                                               "smri_area_cdk_pcrh"), 
                               "rostral anterior cingulate" = c("smri_area_cdk_rracatelh", 
                                                                "smri_area_cdk_rracaterh"), 
                               "rostral middle frontal" = c("smri_area_cdk_rrmdfrlh", 
                                                            "smri_area_cdk_rrmdfrrh"), 
                               "superior frontal" = c("smri_area_cdk_sufrlh", 
                                                      "smri_area_cdk_sufrrh"), 
                               "superior parietal" = c("smri_area_cdk_supllh", 
                                                       "smri_area_cdk_suplrh"), 
                               "superior temporal" = c("smri_area_cdk_sutmlh", 
                                                       "smri_area_cdk_sutmrh"), 
                               "supramarginal" = c("smri_area_cdk_smlh", 
                                                   "smri_area_cdk_smrh"), 
                               "frontal pole" = c("smri_area_cdk_frpolelh", 
                                                  "smri_area_cdk_frpolerh"), 
                               "temporal pole" = c("smri_area_cdk_tmpolelh", 
                                                   "smri_area_cdk_tmpolerh"), 
                               "transverse temporal" = c("smri_area_cdk_trvtmlh", 
                                                         "smri_area_cdk_trvtmrh"), 
                               "insula" = c("smri_area_cdk_insulalh", 
                                            "smri_area_cdk_insularh"), 
                               "inferior temporal" = c("smri_area_cdk_iftmlh", 
                                                       "smri_area_cdk_iftmrh"),
                               "bankssts" = c("smri_area_cdk_banksstslh", 
                                              "smri_area_cdk_banksstsrh"),
                               other_level = 'all'))

  

write.csv(demog_area_combos, file = "~/Downloads/ABCD_REU/demog_area_combos.csv")


area_data_list <- list()

for(row in 1:nrow(demog_area_combos)) {
  
  my_ycol <- demog_area_combos[row,3]
  print(my_ycol)
  data_list[[row]] = subset_data(
    comb,
    xcol = "interview_age",
    ycol = my_ycol,
    filter_var1 = "sex",
    filter_val1 = demog_area_combos[row, 1],
    filter_var2 = "race_ethnicity",
    filter_val2 = demog_area_combos[row, 2])
}


```

## modeling functions

```{r}
#| label: modeling-functions 


#define a list of centiles that we want information for  
centiles <- c(0.4, 2, 2.5, 10, 25, 50, 75, 90, 97.5, 98, 99.6)

#define list of centile labels that will come from running models 
centile_labels <- c(paste("c.", rep(1:length(centiles)), sep = ''))

#find optimal power transformations 
find_power <- function(data_subset){ 
  data_subset <- data_subset |> filter(!is.na(yvar) & !is.na(xvar))
  power <- gamlss::findPower(yvar, xvar, data = na.omit(data_subset), k = 2)
  return(power)
  }


#make models 
thickness_model <- function(data_subset, power) {
  # build gamlss model
  model <- gamlss(
  yvar ~ pb(xvar^power) + gamlss::random(src_subject_id) + gamlss::random(site_id_l),
  sigma.formula = ~pb(xvar),
  tau.formula = ~xvar,
  nu.formula = ~xvar,
  family = BCTo,
  data = data_subset |> filter(!is.na(xvar) & !is.na(yvar))
  )

  return(model)
}

#make models 
area_model <- function(data_subset, power) {
  # build gamlss model
  model <- gamlss(
  yvar ~ pb(xvar^power) + gamlss::random(src_subject_id) + gamlss::random(site_id_l),
  sigma.formula = ~pb(xvar),
  tau.formula = ~xvar,
  nu.formula = ~xvar,
  family = BCPEo,
  data = data_subset |> filter(!is.na(xvar) & !is.na(yvar))
  )

  return(model)
}




```

## make models

```{r}
#| label: make-thickness-models 

thick_model_list <- c()
thick_power_list <- c()

#for every demographic combination 
for(row_num in 1:nrow(demog_thick_combos)) { 
  #dataframe that only has the info for the current demographic group 
  print(paste("printing model", row_num))
  curr_df <- data_list[[row_num]]
  curr_power <- find_power(curr_df)
  thick_power_list[row_num] = curr_power
  thick_model_list[[row_num]] = thickness_model(curr_df, curr_power)
  }


```

```{r}
#| label: make-area-models 

area_model_list <- c()
area_power_list <- c()


#for every demographic combination 
for(row_num in 1:nrow(demog_area_combos)) { 
  #dataframe that only has the info for the current demographic group 
  print(paste("fitting model", row_num))
  curr_df <- data_list[[row_num]]
  curr_power <- find_power(curr_df)
  area_power_list[row_num] = curr_power
  area_model_list[[row_num]] = area_model(curr_df, curr_power)
  }



```

# extract model parameters

```{r}
#| label: model-parameters 

#thickness parameters 

thickness_parameters <- c()


for(i in 1:nrow(demog_thick_combos)){ 
  
  curr_model <- thick_model_list[[i]]
  model_frame <- model.frame(curr_model)
  power <- power_list[i]
  all_xvalues <- model_frame$`pb(xvar^power)`
  #extract transformed x-values, invert them 
  transformed_x <- unique(all_xvalues)
  final_x <- unique(round(transformed_x^(1/power)))
  
  #all parameter estimates 
  mu_estimates <- fitted(curr_model, "mu")
  sigma_estimates <- fitted(curr_model, "sigma")
  nu_estimates <- fitted(curr_model, "nu")
  tau_estimates <- fitted(curr_model, "tau")
  
  
  #put them inside a dataframe 
  results_df <- data.frame(x = final_x, mu = NA, sigma = NA, nu = NA, tau = NA) 
  
  for (j in 1:nrow(results_df)) {
   
    # get indices of rows corresponding to the current transformed x_value
    indices <- which(model_frame$`pb(xvar^power)` == transformed_x[j])
    # find mean of parameter estimates for each x value 
    results_df$mu[j] <- mean(mu_estimates[indices])
    results_df$sigma[j] <- mean(sigma_estimates[indices])
    results_df$nu[j] <- mean(nu_estimates[indices])
    results_df$tau[j] <- mean(tau_estimates[indices])
  }
  
  results_df <- results_df |> 
    na.omit() |>
    filter(mu > 0 & sigma > 0) |>
    arrange(x) 
  

  thickness_parameters[[i]] <- results_df
  
  
  
  }


#save(thickness_parameters, file = "~/Downloads/ABCD_REU/thickness_parameters.RData")




# area parameters 

area_parameters <- c()


for(i in 1:nrow(demog_area_combos)){ 
  
  curr_model <- area_model_list[[i]]
  model_frame <- model.frame(curr_model)
  power <- area_power_list[i]
  all_xvalues <- model_frame$`pb(xvar^power)`
  #extract transformed x-values, invert them 
  transformed_x <- unique(all_xvalues)
  final_x <- unique(round(transformed_x^(1/power)))
  
  #all parameter estimates 
  mu_estimates <- fitted(curr_model, "mu")
  sigma_estimates <- fitted(curr_model, "sigma")
  nu_estimates <- fitted(curr_model, "nu")
  tau_estimates <- fitted(curr_model, "tau")
  
  
  #put them inside a dataframe 
  results_df <- data.frame(x = final_x, mu = NA, sigma = NA, nu = NA, tau = NA) 
  
  for (j in 1:nrow(results_df)) {
   
    # get indices of rows corresponding to the current transformed x_value
    indices <- which(model_frame$`pb(xvar^power)` == transformed_x[j])
    # find mean of parameter estimates for each x value 
    results_df$mu[j] <- mean(mu_estimates[indices])
    results_df$sigma[j] <- mean(sigma_estimates[indices])
    results_df$nu[j] <- mean(nu_estimates[indices])
    results_df$tau[j] <- mean(tau_estimates[indices])
  }
  
  results_df <- results_df |> 
    na.omit() |>
    filter(mu > 0 & sigma > 0) |>
    arrange(x) 
  

  area_parameters[[i]] <- results_df
  
  
  
  }

#save(area_parameters, file = "~/Downloads/ABCD_REU/area_parameters.RData")


```

# make centiles 

```{r}
#| label: thickness-centiles 

qfun <- "qBCTo"

interview_ages <- c(107:189)
thickness_centiles <- data.frame(matrix(ncol = length(interview_ages) + 4, nrow = 0))
colnames(thickness_centiles) <- c("centile", interview_ages, "region", "race", "sex")

thickness_centiles <- thickness_centiles |>
    mutate(across(c(region, race, sex), as.character))  

#for every combination of demographic / brain area 
for(i in 1:nrow(demog_thick_combos)){ 
  
  #pull areas
  demog_sex <- demog_thick_combos[i, 1]
  demog_race <- demog_thick_combos[i, 2] 
  brain_region <- demog_thick_combos[i, 3]
  parameters_df <- thickness_parameters[[i]]
  model_xvars <- parameters_df$x
  
  region_matrix <- matrix(NA, ncol = length(centiles), nrow = length(model_xvars))
  
  #calculate centiles for every age --> region matrix with centiles, in order of xvars 
  for(var_index in 1:length(centiles)){ 
    var <- centiles[var_index] 
    for(age_index in 1:length(model_xvars)){
      newcall <- call(
        qfun, var/100,
        mu = parameters_df[age_index, 2],
        sigma = parameters_df[age_index, 3],
        nu = parameters_df[age_index, 4],
        tau = parameters_df[age_index, 5])
      region_matrix[age_index, var_index] <- eval(newcall)
    }
  }
  

  
   #add the ages in, reformat so it matches the brain df 
  region_df <- data.frame(c = region_matrix, 
                          x = model_xvars) |> 
    pivot_wider(names_from = x, 
                values_from = c(centile_labels)) |> 
    pivot_longer(everything(), 
                 names_to = "col_names") |> 
    separate(col_names, into = c("centile", "age"), sep = "_") |> 
    mutate(age = as.numeric(age)) |> 
    pivot_wider(names_from = age, values_from = value) |> 
    mutate(region = as.character(brain_region)) |> 
    mutate(centile = case_match(centile, 
      "c.1" ~ 0.4, 
      "c.2" ~ 2, 
      "c.3" ~ 2.5, 
      "c.4" ~ 10, 
      "c.5" ~ 25, 
      "c.6" ~ 50, 
      "c.7" ~ 75, 
      "c.8" ~ 90, 
      "c.9" ~ 97.5, 
      "c.10" ~ 98, 
      "c.11" ~ 99.6), 
      race = demog_race, 
      sex = demog_sex) 
  
  thickness_centiles <- bind_rows(thickness_centiles, region_df)
    
  
  
}





#add brain regions and hemispheres to this dataframe 
thickness_centiles_clean <- thickness_centiles |> 
  mutate(hemisphere = case_when( 
                                 grepl("lh", region) ~ "left", 
                                 grepl("rh", region) ~ "right", 
                                 .default = "both"),
        region = factor(region), 
         region = fct_collapse(region, 
                               "pericalcarine" = c("smri_thick_cdk_pericclh", 
                                                       "smri_thick_cdk_periccrh"), 
                               "caudal anterior cingulate" = c("smri_thick_cdk_cdacatelh", 
                                                               "smri_thick_cdk_cdacaterh"), 
                               "caudal middle frontal" = c("smri_thick_cdk_cdmdfrlh", 
                                                           "smri_thick_cdk_cdmdfrrh"), 
                               "cuneus" = c("smri_thick_cdk_cuneuslh", 
                                            "smri_thick_cdk_cuneusrh"), 
                               "entorhinal" = c("smri_thick_cdk_ehinallh", 
                                                "smri_thick_cdk_ehinalrh"), 
                               "fusiform" = c("smri_thick_cdk_fusiformlh", 
                                              "smri_thick_cdk_fusiformrh"), 
                               "inferior parietal" = c("smri_thick_cdk_ifpllh", 
                                                       "smri_thick_cdk_ifplrh"),
                               "isthmus cingulate" = c("smri_thick_cdk_ihcatelh", 
                                                       "smri_thick_cdk_ihcaterh"), 
                               "lateral occipital" = c("smri_thick_cdk_locclh", 
                                                       "smri_thick_cdk_loccrh"), 
                               "lateral orbitofrontal" = c("smri_thick_cdk_lobfrlh", 
                                                           "smri_thick_cdk_lobfrrh"), 
                               "lingual" = c("smri_thick_cdk_linguallh", 
                                             "smri_thick_cdk_lingualrh"), 
                               "medial orbitofrontal" = c("smri_thick_cdk_mobfrlh", 
                                                          "smri_thick_cdk_mobfrrh"), 
                               "middle temporal" = c("smri_thick_cdk_mdtmlh", 
                                                     "smri_thick_cdk_mdtmrh"), 
                               "parahippocampal" = c("smri_thick_cdk_parahpallh", 
                                                     "smri_thick_cdk_parahpalrh"), 
                               "paracentral" = c("smri_thick_cdk_paracnlh", 
                                                 "smri_thick_cdk_paracnrh"), 
                               "pars opercularis" = c("smri_thick_cdk_parsopclh", 
                                                      "smri_thick_cdk_parsopcrh"), 
                               "pars orbitalis" = c("smri_thick_cdk_parsobislh", 
                                                    "smri_thick_cdk_parsobisrh"), 
                               "pars triangularis" = c("smri_thick_cdk_parstgrislh", 
                                                       "smri_thick_cdk_parstgrisrh"), 
                               "pericalcarine" = c("smri_thick_cdk_pericclh", 
                                                   "smri_thick_cdk_periccrh"), 
                               "postcentral" = c("smri_thick_cdk_postcnlh",
                                                 "smri_thick_cdk_postcnrh"), 
                               "posterior cingulate" = c("smri_thick_cdk_ptcatelh", 
                                                         "smri_thick_cdk_ptcaterh"), 
                               "precentral" = c("smri_thick_cdk_precnlh", 
                                                "smri_thick_cdk_precnrh"), 
                               "precuneus" = c("smri_thick_cdk_pclh", 
                                               "smri_thick_cdk_pcrh"), 
                               "rostral anterior cingulate" = c("smri_thick_cdk_rracatelh", 
                                                                "smri_thick_cdk_rracaterh"), 
                               "rostral middle frontal" = c("smri_thick_cdk_rrmdfrlh", 
                                                            "smri_thick_cdk_rrmdfrrh"), 
                               "superior frontal" = c("smri_thick_cdk_sufrlh", 
                                                      "smri_thick_cdk_sufrrh"), 
                               "superior parietal" = c("smri_thick_cdk_supllh", 
                                                       "smri_thick_cdk_suplrh"), 
                               "superior temporal" = c("smri_thick_cdk_sutmlh", 
                                                       "smri_thick_cdk_sutmrh"), 
                               "supramarginal" = c("smri_thick_cdk_smlh", 
                                                   "smri_thick_cdk_smrh"), 
                               "frontal pole" = c("smri_thick_cdk_frpolelh", 
                                                  "smri_thick_cdk_frpolerh"), 
                               "temporal pole" = c("smri_thick_cdk_tmpolelh", 
                                                   "smri_thick_cdk_tmpolerh"), 
                               "transverse temporal" = c("smri_thick_cdk_trvtmlh", 
                                                         "smri_thick_cdk_trvtmrh"), 
                               "insula" = c("smri_thick_cdk_insulalh", 
                                            "smri_thick_cdk_insularh"), 
                               "inferior temporal" = c("smri_thick_cdk_iftmlh", 
                                                       "smri_thick_cdk_iftmrh"),
                               "bankssts" = c("smri_thick_cdk_banksstslh", 
                                              "smri_thick_cdk_banksstsrh"),
                               
                               other_level = 'all'
                                                       ), 
        race = str_to_title(race), 
        sex = str_to_title(sex))




#write.csv(thickness_centiles_clean,"~/Downloads/ABCD_REU/full_thickness_df.csv")


```

```{r}
#| label: area-centiles 


qfun <- "qBCPEo"

interview_ages <- c(107:189)
area_centiles <- data.frame(matrix(ncol = length(interview_ages) + 4, nrow = 0))
colnames(area_centiles) <- c("centile", interview_ages, "region", "race", "sex")

area_centiles <- area_centiles |>
    mutate(across(c(region, race, sex), as.character))  

#for every combination of demographic / brain area 
for(i in 1:nrow(demog_area_combos)){ 
  
  #pull areas and parameters
  demog_sex <- demog_area_combos[i, 1]
  demog_race <- demog_area_combos[i, 2] 
  brain_region <- demog_area_combos[i, 3]
  parameters_df <- area_parameters[[i]]
  model_xvars <- parameters_df$x
  
  region_matrix <- matrix(NA, ncol = length(centiles), nrow = length(model_xvars))
  
  #calculate centiles for every age --> region matrix with centiles, in order of xvars 
  for(var_index in 1:length(centiles)){ 
    var <- centiles[var_index] 
    for(age_index in 1:length(model_xvars)){
      newcall <- call(
        qfun, var/100,
        mu = parameters_df[age_index, 2],
        sigma = parameters_df[age_index, 3],
        nu = parameters_df[age_index, 4],
        tau = parameters_df[age_index, 5])
      region_matrix[age_index, var_index] <- eval(newcall)
    }
  }
  

  
  #add the ages in, reformat so it matches the brain df 
  region_df <- data.frame(c = region_matrix, 
                          x = model_xvars) |> 
    pivot_wider(names_from = x, 
                values_from = c(centile_labels)) |> 
    pivot_longer(everything(), 
                 names_to = "col_names") |> 
    separate(col_names, into = c("centile", "age"), sep = "_") |> 
    mutate(age = as.numeric(age)) |> 
    pivot_wider(names_from = age, values_from = value) |> 
    mutate(region = as.character(brain_region)) |> 
    mutate(centile = case_match(centile, 
      "c.1" ~ 0.4, 
      "c.2" ~ 2, 
      "c.3" ~ 2.5, 
      "c.4" ~ 10, 
      "c.5" ~ 25, 
      "c.6" ~ 50, 
      "c.7" ~ 75, 
      "c.8" ~ 90, 
      "c.9" ~ 97.5, 
      "c.10" ~ 98, 
      "c.11" ~ 99.6), 
      race = demog_race, 
      sex = demog_sex) 
  
  area_centiles <- bind_rows(area_centiles, region_df)
    
    
    
  
}


#add brain regions and hemispheres to this dataframe 
area_centiles_clean <- area_centiles |> 
  mutate(hemisphere = case_when( 
                                 grepl("lh", region) ~ "left", 
                                 grepl("rh", region) ~ "right", 
                                 .default = "both"),
         region = as.factor(region), 
         region = fct_collapse(region, 
                               "pericalcarine" = c("smri_area_cdk_pericclh", 
                                                       "smri_area_cdk_periccrh"), 
                               "caudal anterior cingulate" = c("smri_area_cdk_cdacatelh", 
                                                               "smri_area_cdk_cdacaterh"), 
                               "caudal middle frontal" = c("smri_area_cdk_cdmdfrlh", 
                                                           "smri_area_cdk_cdmdfrrh"), 
                               "cuneus" = c("smri_area_cdk_cuneuslh", 
                                            "smri_area_cdk_cuneusrh"), 
                               "entorhinal" = c("smri_area_cdk_ehinallh", 
                                                "smri_area_cdk_ehinalrh"), 
                               "fusiform" = c("smri_area_cdk_fusiformlh", 
                                              "smri_area_cdk_fusiformrh"), 
                               "inferior parietal" = c("smri_area_cdk_ifpllh", 
                                                       "smri_area_cdk_ifplrh"),
                               "isthmus cingulate" = c("smri_area_cdk_ihcatelh", 
                                                       "smri_area_cdk_ihcaterh"), 
                               "lateral occipital" = c("smri_area_cdk_locclh", 
                                                       "smri_area_cdk_loccrh"), 
                               "lateral orbitofrontal" = c("smri_area_cdk_lobfrlh", 
                                                           "smri_area_cdk_lobfrrh"), 
                               "lingual" = c("smri_area_cdk_linguallh", 
                                             "smri_area_cdk_lingualrh"), 
                               "medial orbitofrontal" = c("smri_area_cdk_mobfrlh", 
                                                          "smri_area_cdk_mobfrrh"), 
                               "middle temporal" = c("smri_area_cdk_mdtmlh", 
                                                     "smri_area_cdk_mdtmrh"), 
                               "parahippocampal" = c("smri_area_cdk_parahpallh", 
                                                     "smri_area_cdk_parahpalrh"), 
                               "paracentral" = c("smri_area_cdk_paracnlh", 
                                                 "smri_area_cdk_paracnrh"), 
                               "pars opercularis" = c("smri_area_cdk_parsopclh", 
                                                      "smri_area_cdk_parsopcrh"), 
                               "pars orbitalis" = c("smri_area_cdk_parsobislh", 
                                                    "smri_area_cdk_parsobisrh"), 
                               "pars triangularis" = c("smri_area_cdk_parstgrislh", 
                                                       "smri_area_cdk_parstgrisrh"), 
                               "pericalcarine" = c("smri_area_cdk_pericclh", 
                                                   "smri_area_cdk_periccrh"), 
                               "postcentral" = c("smri_area_cdk_postcnlh",
                                                 "smri_area_cdk_postcnrh"), 
                               "posterior cingulate" = c("smri_area_cdk_ptcatelh", 
                                                         "smri_area_cdk_ptcaterh"), 
                               "precentral" = c("smri_area_cdk_precnlh", 
                                                "smri_area_cdk_precnrh"), 
                               "precuneus" = c("smri_area_cdk_pclh", 
                                               "smri_area_cdk_pcrh"), 
                               "rostral anterior cingulate" = c("smri_area_cdk_rracatelh", 
                                                                "smri_area_cdk_rracaterh"), 
                               "rostral middle frontal" = c("smri_area_cdk_rrmdfrlh", 
                                                            "smri_area_cdk_rrmdfrrh"), 
                               "superior frontal" = c("smri_area_cdk_sufrlh", 
                                                      "smri_area_cdk_sufrrh"), 
                               "superior parietal" = c("smri_area_cdk_supllh", 
                                                       "smri_area_cdk_suplrh"), 
                               "superior temporal" = c("smri_area_cdk_sutmlh", 
                                                       "smri_area_cdk_sutmrh"), 
                               "supramarginal" = c("smri_area_cdk_smlh", 
                                                   "smri_area_cdk_smrh"), 
                               "frontal pole" = c("smri_area_cdk_frpolelh", 
                                                  "smri_area_cdk_frpolerh"), 
                               "temporal pole" = c("smri_area_cdk_tmpolelh", 
                                                   "smri_area_cdk_tmpolerh"), 
                               "transverse temporal" = c("smri_area_cdk_trvtmlh", 
                                                         "smri_area_cdk_trvtmrh"), 
                               "insula" = c("smri_area_cdk_insulalh", 
                                            "smri_area_cdk_insularh"), 
                               "inferior temporal" = c("smri_area_cdk_iftmlh", 
                                                       "smri_area_cdk_iftmrh"),
                               "bankssts" = c("smri_area_cdk_banksstslh", 
                                              "smri_area_cdk_banksstsrh"),
                               other_level = 'all'),

        race = str_to_title(race), 
        sex = str_to_title(sex))



#write.csv(area_centiles_clean,"~/Downloads/ABCD_REU/full_area_df.csv")


```
