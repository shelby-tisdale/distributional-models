---
title: "Distributional Models for Adolescent Brain Development"
format: dashboard
server: shiny
theme: [theme/custom.scss]
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages
#| warning: false
#| message: false
#| output: false
#| context: setup

# load all necessary packages
library(tidyverse)
library(gt)
library(DT)
library(janitor)
library(shiny)
library(knitr)
library(kableExtra)
library(scales)
library(extrafont)
library(gamlss)
library(gamlss.ggplots)
library(plotly)
library(latex2exp)
library(ggseg)
library(patchwork)
library(gtsummary)
library(rlist)
library(grid)
library(gridExtra)
library(viridis)
library(ggseg3d)
library(ggpubr)
library(lubridate)

# set theme for visualizations
theme_set(theme_minimal(base_size = 16, base_family = "Atkinson Hyperlegible"))
```

```{r}
#| label: area-labels
#| output: false
#| context: data
#| warning: false
#| message: false
#| cache: true

# labels for cortical surface area variables
# from ABCD data dictionary
area_labels <- read_csv(
  "~/Equitable Data Science REU/distributional-models/additional data/Area_Variable_Labels.csv"
  ) |>
  # clean labels
  mutate(var_label = str_replace(var_label, "Cortical area in mm\\^", ""),
         var_label = str_replace(var_label, "2 of APARC ROI ", ""),
         var_label = str_replace(var_label, "lh-", "Left Hemisphere "),
         var_label = str_replace(var_label, "rh-", "Right Hemisphere "),
         var_label = str_replace(var_label, "cortical area in mm\\^2", ""),
         var_label = str_replace(var_label, "Total ", ""),
         var_label = str_to_lower(var_label))# |>
  # arrange in alphabetical order
 # arrange(var_label)

# save area labels as vector
area_vars <- area_labels$var_label
```

```{r}
#| label: thickness-labels
#| output: false
#| context: data
#| warning: false
#| message: false
#| cache: true

thickness_labels <- read_csv(
  "~/Equitable Data Science REU/distributional-models/additional data/Thickness_Variable_Labels.csv"
  ) |>
  mutate(var_label = str_remove_all(var_label, "Cortical thickness in mm of APARC ROI"),
         var_label = str_replace(var_label, "lh-", "left Hemisphere "),
         var_label = str_replace(var_label, "rh-", "right Hemisphere "),
         var_label = str_remove_all(var_label, "Mean cortical thickness in mm for "),
         var_label = str_remove_all(var_label, "Mean cortical thickness in mm "))

# save thickness labels as vector
thick_vars <- thickness_labels$var_label
```

```{r}
#| label: load-and-prep-data
#| output: false
#| context: data
#| warning: false
#| message: false
#| cache: true

# specify ABCD data directory
data_dir <- 'C:/Users/queen/Box/ABCD Tabulated Data/5.1/core/'

# NOTE: must run entire code chunk
if (!is.null(data_dir)) {
  setwd(data_dir)
}

# LOAD DATA
# Demographic variables and propensity weights
demog <- read.csv("abcd-general/abcd_p_demo.csv", na.strings = c("999", "777"))
# Age in months, Site ID (ABCD Study Design Variables), Family ID
study_covars <- read.csv("abcd-general/abcd_y_lt.csv")
# desikan atlas, cortical thickness
dat.mri = read.csv('imaging/mri_y_smr_thk_dsk.csv')
# desikan atlas, cortical surface area
dat.mri.area = read.csv('imaging/mri_y_smr_area_dsk.csv') #|>
  #select(src_subject_id, eventname, smri_area_cdk_total)
```

```{r}
#| label: clean-demographic-variables
#| context: data
#| cache: true

# basic cleaning for demographic variables
demog_clean <- demog |>
  # filter for events of interest
  filter(eventname %in% c("baseline_year_1_arm_1", "2_year_follow_up_y_arm_1",
                          "4_year_follow_up_y_arm_1")) |>
  # select broad demographics
  select(src_subject_id, eventname, starts_with("demo_brthdat_v2"), demo_sex_v2,
         race_ethnicity) |>
  mutate(
    # clean age variable
    age = case_when(
      eventname == "baseline_year_1_arm_1" ~ trunc(demo_brthdat_v2),
      eventname %in% c(
        "2_year_follow_up_y_arm_1", "4_year_follow_up_y_arm_1"
        ) ~ trunc(demo_brthdat_v2_l)),
    # broad race/ethnicity categories
    # will disaggregate in final analysis
    race_ethnicity = case_match(
      race_ethnicity,
      1 ~ "White",
      2 ~ "Black",
      3 ~ "Hispanic",
      4 ~ "Asian",
      5 ~ "Other"
    ),
    # recode sex variable
    sex = factor(demo_sex_v2),
    sex = fct_recode(
      sex,
      "Male" = "1",
      "Female" = "2",
      "Intersex-Male" = "3"
    ))
```

```{r}
#| label: prep-data-for-modeling
#| context: data
#| cache: true

# create dataset for modeling
mri_data <- dat.mri |>
  full_join(dat.mri.area, by = join_by("eventname", "src_subject_id")) |>
  # join mri data to demographics
  right_join(demog_clean, by = join_by("eventname", "src_subject_id")) |>
  # join to study covariates
  left_join(study_covars, by = join_by("eventname", "src_subject_id")) |>
  # select variables of interest
  select(src_subject_id, eventname, age, sex, site_id_l, race_ethnicity,
         interview_age, contains("smri_thick"), contains("smri_area_cdk")) |>
  # remove irrelevant ages 
  filter(age < 16 & age > 8) |>
  mutate(interview_age = as.numeric(interview_age)) |>
  group_by(src_subject_id) |>
  drop_na(smri_thick_cdk_mean, smri_area_cdk_total) |>
  # fill repeated demographic values
  mutate(sex = first(na.omit(sex)),
         race_ethnicity = first(na.omit(race_ethnicity)),
         src_subject_id = factor(src_subject_id),
         site_id_l = factor(site_id_l),
         race_ethnicity = factor(race_ethnicity)) |>
  ungroup()

# dataset to be subsetted for models
brain_data <- mri_data |>
  # na.omit(mri_data) |>
  filter(sex != "Intersex-Male") |>
  mutate(sex = factor(sex))
```

```{r}
#| label: visualizations-for-poster
#| eval: false

library(patchwork)

area_density <- brain_data |> 
  filter(!is.na(sex) & !is.na(race_ethnicity) & sex != "Intersex-Male") |>
  mutate(race_ethnicity = if_else(race_ethnicity == "Other", "Not Listed", race_ethnicity)) |>
  ggplot(aes(x = smri_area_cdk_total)) +
  geom_density(aes(fill = sex), alpha = 0.5) +
  facet_wrap(~race_ethnicity, ncol = 1) +
  scale_x_continuous(label = label_comma()) +
  scale_fill_manual(values = c("steelblue1", "tomato1")) + 
  labs(title = NULL,
       x = TeX("Cortical Surface Area ($mm^2$)"),
       y = NULL,
       fill = "Sex") +
  theme_minimal(base_family = "Lato") +
  theme(axis.text.y = element_blank(),
        legend.position = "top")

thick_density <- brain_data |> 
  filter(!is.na(sex) & !is.na(race_ethnicity) & sex != "Intersex-Male") |>
  mutate(race_ethnicity = if_else(race_ethnicity == "Other", "Not Listed", race_ethnicity)) |>
  ggplot(aes(x = smri_thick_cdk_mean)) +
  geom_density(aes(fill = sex), alpha = 0.5, show.legend = FALSE) +
  facet_wrap(~race_ethnicity, ncol = 1) +
  scale_x_continuous(label = label_comma()) +
  scale_fill_manual(values = c("steelblue1", "tomato1")) + 
  labs(title = NULL,
       x = "Mean Cortical Thickness (mm)",
       y = NULL) +
  theme_minimal(base_family = "Lato") +
  theme(axis.text.y = element_blank())

area_density + thick_density

demog_brain_combos_area <- as.data.frame(demog_brain_combos_area)
index_1 <- which(demog_brain_combos_area$sex == "Female" & demog_brain_combos_area$race_ethnicity == "White" & demog_brain_combos_area$var_name == "smri_area_cdk_total")
index_2 <- which(demog_brain_combos_area$sex == "Male" & demog_brain_combos_area$race_ethnicity == "Black" & demog_brain_combos_area$var_name == "smri_area_cdk_total")
data_1 <- data_list[[index_1]]
data_2 <- data_list[[index_2]]
model_1 <- model_list[[index_1]]
model_2 <- model_list[[index_2]]

white_female_plot <- centiles_plot(
  model_1,
  data_1,
  substitute(interview_age),
  "smri_area_cdk_total",
  c(0.4, 2, 10, 25, 50, 75, 90, 98, 99.6),
  race = "White",
  sex = "Female"
)

black_male_plot <- centiles_plot(
  model_2,
  data_2,
  substitute(interview_age),
  "smri_area_cdk_total",
  c(0.4, 2, 10, 25, 50, 75, 90, 98, 99.6),
  race = "Black",
  sex = "Male"
)
white_female_plot + black_male_plot
```

```{r}
#| label: additional-prep-for-brain-plots
#| context: data
#| cache: true

brain_pictures <- brain_data |> 
  pivot_longer(cols = contains("smri_thick"), names_to = "phenotype") |> 
  #add hemisphere classification 
  mutate(hemisphere = case_when(
    grepl("lh", phenotype) ~ "left",
    grepl("rh", phenotype) ~ "right",
    .default = NA),
    #use forcats to collapse regions 
    region = factor(phenotype),
    region = fct_collapse(
      phenotype,
      "pericalcarine" = c("smri_thick_cdk_pericclh", "smri_thick_cdk_periccrh"),
      "caudal anterior cingulate" = c("smri_thick_cdk_cdacatelh", "smri_thick_cdk_cdacaterh"),
      "caudal middle frontal" = c("smri_thick_cdk_cdmdfrlh", "smri_thick_cdk_cdmdfrrh"),
      "cuneus" = c("smri_thick_cdk_cuneuslh", "smri_thick_cdk_cuneusrh"),
      "entorhinal" = c("smri_thick_cdk_ehinallh", "smri_thick_cdk_ehinalrh"),
      "fusiform" = c("smri_thick_cdk_fusiformlh", "smri_thick_cdk_fusiformrh"),
      "inferior parietal" = c("smri_thick_cdk_ifpllh", "smri_thick_cdk_ifplrh"),
      "isthmus cingulate" = c("smri_thick_cdk_ihcatelh", "smri_thick_cdk_ihcaterh"),
      "lateral occipital" = c("smri_thick_cdk_locclh", "smri_thick_cdk_loccrh"),
      "lateral orbitofrontal" = c("smri_thick_cdk_lobfrlh", "smri_thick_cdk_lobfrrh"),
      "lingual" = c("smri_thick_cdk_linguallh", "smri_thick_cdk_lingualrh"),
      "medial orbitofrontal" = c("smri_thick_cdk_mobfrlh", "smri_thick_cdk_mobfrrh"),
      "middle temporal" = c("smri_thick_cdk_mdtmlh", "smri_thick_cdk_mdtmrh"),
      "parahippocampal" = c("smri_thick_cdk_parahpallh", "smri_thick_cdk_parahpalrh"),
      "paracentral" = c("smri_thick_cdk_paracnlh", "smri_thick_cdk_paracnrh"),
      "pars opercularis" = c("smri_thick_cdk_parsopclh", "smri_thick_cdk_parsopcrh"),
      "pars orbitalis" = c("smri_thick_cdk_parsobislh", "smri_thick_cdk_parsobisrh"),
      "pars triangularis" = c("smri_thick_cdk_parstgrislh", "smri_thick_cdk_parstgrisrh"),
      "pericalcarine" = c("smri_thick_cdk_pericclh", "smri_thick_cdk_periccrh"),
      "postcentral" = c("smri_thick_cdk_postcnlh", "smri_thick_cdk_postcnrh"),
      "posterior cingulate" = c("smri_thick_cdk_ptcatelh", "smri_thick_cdk_ptcaterh"),
      "precentral" = c("smri_thick_cdk_precnlh", "smri_thick_cdk_precnrh"),
      "precuneus" = c("smri_thick_cdk_pclh", "smri_thick_cdk_pcrh"),
      "rostral anterior cingulate" = c("smri_thick_cdk_rracatelh", "smri_thick_cdk_rracaterh"),
      "rostral middle frontal" = c("smri_thick_cdk_rrmdfrlh", "smri_thick_cdk_rrmdfrrh"),
      "superior frontal" = c("smri_thick_cdk_sufrlh", "smri_thick_cdk_sufrrh"),
      "superior parietal" = c("smri_thick_cdk_supllh", "smri_thick_cdk_suplrh"),
      "superior temporal" = c("smri_thick_cdk_sutmlh", "smri_thick_cdk_sutmrh"),
      "supramarginal" = c("smri_thick_cdk_smlh", "smri_thick_cdk_smrh"),
      "frontal pole" = c("smri_thick_cdk_frpolelh", "smri_thick_cdk_frpolerh"),
      "temporal pole" = c("smri_thick_cdk_tmpolelh", "smri_thick_cdk_tmpolerh"),
      "transverse temporal" = c("smri_thick_cdk_trvtmlh", "smri_thick_cdk_trvtmrh"),
      "insula" = c("smri_thick_cdk_insulalh", "smri_thick_cdk_insularh"),
      "inferior temporal" = c("smri_thick_cdk_iftmlh", "smri_thick_cdk_iftmrh"),
      "bankssts" = c("smri_thick_cdk_banksstslh", "smri_thick_cdk_banksstsrh"),
      other_level = 'missing')) |>
  select(src_subject_id, eventname, age, sex, site_id_l, race_ethnicity,
         interview_age, phenotype, value, hemisphere, region) |>
  na.omit()
```

```{r}
#| label: find-demographic-combinations
#| context: data
#| cache: true

# find all combinations of race and sex
demog_combos <- brain_data |>
  mutate(race_ethnicity = as.character(race_ethnicity),
         sex = factor(sex)) |>
  expand(sex, race_ethnicity) |>
  na.omit()

# create vectors to add "All" race category
male_all <- c("Male", "All")
female_all <- c("Female", "All")

# add "All" category to combinations
demog_combos <- rbind(demog_combos, male_all, female_all)

# find y axis limits for area variables
limits_area <- brain_data |> pivot_longer(
  cols = starts_with("smri_area"),
  names_to = "var_name",
  values_to = "values"
) |>
  group_by(var_name) |>
  summarize(
    min_value = mean(values) - 3*sd(values),
    max_value = mean(values) + 3*sd(values)
  )

# find y axis limits for thickness variables
limits_thick <- brain_data |> pivot_longer(
  cols = starts_with("smri_thick"),
  names_to = "var_name",
  values_to = "values"
) |>
  group_by(var_name) |>
  summarize(
    min_value = mean(values) - 4*sd(values),
    max_value = mean(values) + 4*sd(values)
  )

# demographic combinations matrix for area variables
demog_brain_combos_area <- expand.grid(
  sex = demog_combos$sex,
  race_ethnicity = demog_combos$race_ethnicity,
  brain_location = area_vars) |>
  distinct() |>
  left_join(area_labels, by = join_by(brain_location == var_label)) |>
  left_join(limits_area, by = join_by(var_name)) |>
  mutate(sex = factor(sex),
         race_ethnicity = factor(race_ethnicity),
         brain_location = factor(brain_location),
         min_value = as.numeric(min_value),
         max_value = as.numeric(max_value)) |>
  as.matrix()

# demographic combinations matrix for thickness variables
demog_brain_combos_thick <- expand.grid(
  sex = demog_combos$sex,
  race_ethnicity = demog_combos$race_ethnicity,
  brain_location = thickness_labels$var_name) |>
  distinct() |>
  left_join(thickness_labels, by = join_by(brain_location == var_name)) |>
  left_join(limits_thick, by = join_by(brain_location == var_name)) |>
  mutate(sex = factor(sex),
         race_ethnicity = factor(race_ethnicity),
         brain_location = factor(brain_location),
         min_value = as.numeric(min_value),
         max_value = as.numeric(max_value)) |>
  select(sex, race_ethnicity, brain_location, var_label, min_value,
         max_value) |>
  as.matrix()
```

```{r}
#| label: subset-data-function
#| context: setup
#| output: false

# SUBSETS DATA BY FILTERING FOR UP TO 2 VARIABLES
# PREPS DATA FOR MODELING
# EX. SEX = "MALE" AND RACE = "BLACK"
subset_data <- function(
    # full data set
    brain_data,
    # x variable
    xcol,
    # y variable
    ycol,
    # first variable to filter by
    filter_var1 = NULL,
    # value of first variable to filter for
    filter_val1 = NULL,
    # second variable to filter by
    filter_var2 = NULL,
    # value of second variable to filter for
    filter_val2 = NULL
) {
  
  # removes underrepresented sex and omits NA values
  brain_data <- brain_data |>
    filter(sex != "Intersex-Male") |>
    mutate(sex = factor(sex)) |>
    na.omit()
  
  if (filter_val2 == "All") {
    filter_var2 = NULL
    filter_val2 = NULL
  }
  
    # subset data
  if (!is.null(filter_var1) & !is.null(filter_val1) & is.null(filter_var2) & is.null(filter_var2)) {
    data_subset <- subset(
      brain_data, brain_data[[filter_var1]] == filter_val1)
  }
  if (!is.null(filter_var2) & !is.null(filter_var2)) {
    data_subset <- subset(
      brain_data, brain_data[[filter_var1]] == filter_val1 & brain_data[[filter_var2]] == filter_val2)
    
  }
  if (is.null(filter_var1) & is.null(filter_val1) & is.null(filter_var2) & is.null(filter_var2)) {
    data_subset <- brain_data
  }
  
  # creates x variable and y variable columns in data set
  data_subset$xvar <- data_subset[[xcol]]
  data_subset$yvar <- data_subset[[ycol]]
  
  return(data_subset)
}
```

```{r}
#| label: model-cortical-area-function
#| context: setup
#| output: false

# Takes output of subset_data() function as argument
area_model <- function(data_subset) {
  
  # finds power transformation for gamlss model
  power <- gamlss::findPower(yvar, xvar, data = data_subset, k = 2)
  
  # build GAMLSS model for subset data
  model <- gamlss(
  yvar ~ pb(xvar^power) + gamlss::random(src_subject_id) + gamlss::random(site_id_l),
  sigma.formula = ~pb(xvar),
  tau.formula = ~xvar,
  nu.formula = ~xvar,
  family = BCPEo,
  data = data_subset
  )

  return(model)
}

```

```{r}
#| label: calculate-centiles-function
#| context: setup
#| output: false

# creates data frame of centiles for a given model object
# model_data *MUST* be the same data used to build model object
calculate_centiles <- function(
  # GAMLSS model object
  model,
  # data used to build model
  model_data,
  # x variable in model_data
  xcol,
  # y variable in model_data
  ycol,
  # centiles to calculate
  cent = c(97.5, 50, 2.5)
) {
  
xvar_ch <- deparse(xcol)
yvar_ch <- ycol
obj = model
x <- y <- NULL

xvar  <- get(xvar_ch, envir = as.environment(model_data))
fname <- obj$family[1]
qfun <- paste("q",fname,sep = "")
oxvar <- xvar[order(xvar)]
oyvar <- obj$y[order(xvar)]

lpar <- 4

ii <- 0
per <- rep(0, length(cent))
centile_matrix <- matrix(0, ncol = length(cent), nrow = dim(model_data)[1])
colnames(centile_matrix) <- cent

for (var in cent) {
  newcall <- call(qfun, var/100,
                  mu = fitted(obj,"mu")[order(xvar)],
                  sigma = fitted(obj,"sigma")[order(xvar)],
                  nu = fitted(obj,"nu")[order(xvar)],
                  tau = fitted(obj,"tau")[order(xvar)]) 
    ii <- ii + 1
    centile_matrix[,ii] <- eval(newcall)
}

lc <- length(cent)
centile_data <- data.frame(
  centile = centile_matrix,
  x = oxvar,
  y = oyvar)

return(centile_data)
}
```

```{r}
#| label: plot-centiles-function
#| context: setup
#| output: false

# returns ggplot for given model and data used to create model
centiles_plot <- function(
    # GAMLSS model object
    model,
    # data used to create GAMLSS model
    model_data,
    # x variable in data
    xcol,
    # y variable in data
    ycol,
    cent = c(2.5, 50, 97.5),
    # whether to include points on plot in addition to centile curves
    points = TRUE,
    race = "",
    sex = "",
    ylims = c(125000, 250000),
    region = "Total Brain"
    ) {
  
  centile_data <- calculate_centiles(model, model_data, xcol, ycol, cent)
  lc <- length(cent)
  c_names <- colnames(centile_data)
  line.size = 1.5
  line.col = hcl.colors(lc, palette = "Dark 2")
  line.type = rep(1, length(cent))
  
  # initialize ggplot object
  gg <- ggplot(data = centile_data)
  
  if (points == TRUE) {
    gg <- gg + geom_point(aes(x = x, y = y),
             size = 1, alpha = 0.2, show.legend = FALSE, color = "gray")
  }
  for (i in 1:lc) {
    
    if (c_names[i] == "centile.50") {
      gg <- gg +
      geom_line(
        aes_string(x = "x", y = c_names[i]),
        color = line.col[i], linewidth = line.size)
    }
    
    else {
      gg <- gg +
      geom_line(
        aes_string(x = "x", y = c_names[i]),
        color = line.col[i], linetype = "dashed", linewidth = line.size)
    }
    
  }
  
  gg <- gg +
    scale_y_continuous(label = comma, limits = ylims) +
    scale_x_continuous(breaks = c(108,120,132,144, 156, 168,180,192),
                     labels = c(9,10,11,12,13,14,15,16)) +
    labs(x = "Age (Years)", y = TeX("Cortical Surface Area in $mm^2$"),
         title = paste(
           "Centiles for", region, "\nfor", race, sex, "Adolescents", sep = " "),
         subtitle = "Using Box-Cox Power Exponential Original Family")
    theme_minimal()  
  
  return(gg)
}
```

```{r}
#| label: download-models-area
#| eval: false

save(model_list, file = "area_model_list.RData")
```

```{r}
#| label: area-model-data
#| context: data
#| cache: true
#| cache-lazy: false

data_list <- list()

for (row in 1:nrow(demog_brain_combos_area)) {
  
  my_ycol <- demog_brain_combos_area[row,4]
  
  
  data_list[[row]] = subset_data(
    brain_data,
    xcol = "interview_age",
    ycol = my_ycol,
    filter_var1 = "sex",
    filter_val1 = demog_brain_combos_area[row, 1],
    filter_var2 = "race_ethnicity",
    filter_val2 = demog_brain_combos_area[row, 2])
}

```

```{r}
#| label: load-models-area
#| context: data
#| cache: false
#| cache-lazy: false

setwd("~/Equitable Data Science REU/distributional-models")
load("area_model_list.RData")
```

```{r}
#| label: build-models-area
#| context: data
#| output: false
#| message: false
#| warning: false
#| eval: false
#| cache-lazy: false
#| cache: false

# create models for each combination of sex and race
model_list <- list()
for (row in 1:nrow(demog_brain_combos_area)) {
  print(
    paste("FITTING MODEL", row, ":", demog_brain_combos_area[row,2],
          demog_brain_combos_area[row,1], demog_brain_combos_area[row,3]))
  model_list[[row]] = area_model(data_subset = data_list[[row]])
}
```

```{r}
#| label: build-models-thickness-function
#| context: data
#| eval: false
#| cache-lazy: false
#| cache: false

#make models 
thickness_model <- function(data_subset) {
  power <- gamlss::findPower(yvar, xvar, data = na.omit(data_subset), k = 2)
  # build gamlss model
  model <- gamlss(
  yvar ~ pb(xvar^power) + gamlss::random(src_subject_id) + gamlss::random(site_id_l),
  sigma.formula = ~pb(xvar),
  tau.formula = ~xvar,
  nu.formula = ~xvar,
  family = BCTo,
  data = na.omit(data_subset)
  )

  return(model)
}


summary(thick_model_list[[1]])
```

```{r}
#| label: thickness-model-data
#| context: data
#| eval: true
#| cache: true
#| cache-lazy: false

thick_data_list <- list()
for (row in 1:nrow(demog_brain_combos_thick)) {
  
  my_ycol <- demog_brain_combos_thick[row,3]
  
  thick_data_list[[row]] = subset_data(
    brain_data,
    xcol = "interview_age",
    ycol = my_ycol,
    filter_var1 = "sex",
    filter_val1 = demog_brain_combos_thick[row, 1],
    filter_var2 = "race_ethnicity",
    filter_val2 = demog_brain_combos_thick[row, 2])
}
```

```{r}
#| label: load-models-thickness
#| context: data
#| cache: false
#| cache-lazy: false
#| output: false

setwd("~/Equitable Data Science REU/distributional-models")
load("thick_model_list_updated.RData")
```

```{r}
#| label: build-models-thickness
#| eval: false

thick_model_list <- list()
for (row in 1:1) {
  print(
    paste("FITTING MODEL", row, ":", demog_brain_combos_thick[row,2],
          demog_brain_combos_thick[row,1], demog_brain_combos_thick[row,5]))
  thick_model_list[[row]] = thickness_model(data_subset = thick_data_list[[row]])
}

setwd("~/Equitable Data Science REU/distributional-models")
save(thick_model_list, file = "thick_model_list_updated.RData")
```

# Home

##  {.sidebar width="25%"}

**Project Background**

## Column

```{r}
#| label: abstract
#| title: "Abstract"
```

```{r}
#| label: modeling-appraoch
#| title: "Modeling Approach"

print("Hello World")
```


```{r}
#| label: table-1
#| title: "Table 1. Sample Demographics"
#| eval: false

distinct(brain_data, src_subject_id)

brain_data |>
  na.omit() |>
  select(eventname, race_ethnicity, sex) |>
  mutate(eventname = case_match(
    eventname,
    "baseline_year_1_arm_1" ~ "Baseline",
    "2_year_follow_up_y_arm_1" ~ "2-Year Follow Up",
    "4_year_follow_up_y_arm_1" ~ "4-Year Follow Up"
  ),
  eventname = factor(eventname),
  eventname = fct_relevel(eventname, c("Baseline", "2-Year Follow Up", "4-Year Follow Up" )),
  race_ethnicity = if_else(race_ethnicity == "Other", "Not Listed", race_ethnicity)) |>
  tbl_summary(
    by = eventname,
    label = list(
    #eventname ~ "Study timepoint",
    race_ethnicity ~ "Race",
    sex ~ "Sex"
    ),
    sort = list(everything() ~ "frequency")
  ) |>
  bold_labels() |>
  add_overall() |>
  modify_spanning_header(all_stat_cols() ~ "**Timepoint**") |>
  modify_header(all_stat_cols() ~ "**{level}**<br> N = {style_number({n})}") |>
as_gt() |>
  tab_header(md("**Table 1**. ABCD Sample Demographics, N = 22,633"), subtitle = NULL, preheader = NULL) |>
  tab_footnote(
  footnote = "Sample includes 22,633 total observations from 11,692 unique participants. At baseline, participants are primarily ages 9 and 10. Participants are primarily ages 11 and 12 at the 2-year follow-up timepoint and ages 13 and 14 at the 4-year follow-up timepoint.",
  location = cells_title()
  )

```

# Centile Estimation

```{r}
#| label: data-for-centile-plots
#| context: data
#| cache: true

#read in thickness data 
demog_thick_combos_est <- read.csv("additional data/demog_thick_combos.csv") |> 
  select(-X) 

thickness_df <- data.frame(read.csv("additional data/full_thickness_df.csv")) |> 
  select(-X) |> 
  rename_with(~ sub('^X', '', .))

load("additional data/thickness_parameters.RData")

# load all of the area data 
demog_area_combos_est <- read.csv("additional data/demog_area_combos.csv") |> 
  select(-X) 

area_df <- read.csv("additional data/full_area_df.csv") |> 
  select(-X) |> 
  rename_with(~ sub('^X', '', .))

load("additional data/area_parameters.RData")
```

## {.sidebar}

```{r}
#| label: centile-estimation-inputs
#| panel: sidebar 

selectInput(
  inputId = "phenotype",
  label = "Phenotype",
  choices = c("Cortical Thickness", "Cortical Surface Area")
  )

selectInput(
  inputId = "hemi",
  label = "Hemisphere",
  choices = c("left", "right", "both"),
  selected = c("both")
  )

selectInput(
  inputId = "region",
  label = "Area of Brain",
  choices = c(unique(demog_thick_combos_est$region)),
  selected = "all"
  )

checkboxGroupInput(
  inputId = "centiles", 
  label = "Centile Selections", 
  choices = c(0.4, 2, 2.5, 10, 25, 50, 75, 90, 97.5, 98, 99.6), 
  selected = c(2.5, 50, 97.5)
  )

selectInput(
  inputId = "race",
  label = "Race",
  choices = c("White", "Black", "Hispanic", "Asian", "Other", "All"),
  selected = "All"
  )

selectInput(
  inputId = "sex",
  label = "Sex",
  choices = c("Male", "Female"),
  selected = "Female"
  )
```


## {.row}
## Row { height = 20%}

### Column {width = 25%}

**Note: Gaps in centile curves represent ages (by months) for which we don't have data. Leave values for which you don't have data as 0. 

```{r}
#| label: input-birthday-centiles

dateInput(
  inputId = "birthday",
  label = "Date of Birth (yyyy/mm/dd)"
  )
```

### Column {width = 25%}

```{r}
#| label: input-visit-dates-centiles

dateInput(
  inputId = "baseline_date",
  label = "Date of Baseline Visit"
  )

numericInput(
  inputId = "baseline_input",
  label = "Baseline Value (mm)",
  value = 0
  )
```

### Column {width = 25%}
```{r}
#| label: input-visit-dates-centiles-2

dateInput(
  inputId = "year2_date",
  label = "Date of Year 2 Follow-up"
  )

numericInput(
  inputId = "year2_input",
  label = "Year 2 Value (mm)",
  value = 0
  )
```

### Column {width = 25%}
```{r}
#| label: input-visit-dates-centiles-4

dateInput(
  inputId = "year4_date", 
  label = "Date of Year 4 Follow-up"
  )

numericInput(
  inputId = "year4_input", 
  label = "Year 4 Value (mm)", 
  value = 0
  )
```

## Row {height = 80%}

```{r}
#| label: output-centile-plot

plotOutput("ctplot")
```

```{r}
#| label: elapsed-months-function
#| context: setup

elapsed_months <- function(end_date, start_date) {
    ed <- as.POSIXlt(end_date)
    sd <- as.POSIXlt(start_date)
    12 * (ed$year - sd$year) + (ed$mon - sd$mon)
}
```

```{r}
#| label: draw-centiles-function
#| context: setup

#function to make centile curves
draw_centiles <- function(
    race_input,
    sex_input,
    hemisphere_input,
    region_input,
    centiles_input,
    phenotype_input
    ) { 
  
  #define dataframe based on phenotype input 
  working_df <- if (phenotype_input == "Cortical Thickness") { 
    thickness_df
  }
  else {area_df}

  #get df for region/group that we want 
  curr_df <- working_df |>
  filter(race == race_input, sex == sex_input, region == region_input) |>
  pivot_longer(
    cols = c(`107`:`189`), 
    names_to = "interview_age",
    values_to = "thickness"
    ) |> 
  filter(centile %in% as.vector(centiles_input)) |> 
  mutate(interview_age = as.numeric(interview_age),
         centile = as.factor(centile), 
         hemisphere = as.factor(hemisphere)) 
  
    #provision for hemispheres
  if (hemisphere_input %in% c("right", "left") | region_input == "all") { 
    curr_df <- curr_df |> filter(hemisphere == hemisphere_input)
    hemi_legend <- "none"}  else { hemi_legend <- NULL}
  
  #initialize ggplot object
  gg <- ggplot(data = curr_df) 
  
  #now add for every centile we wanna plot 
  gg <- gg + geom_line(aes(x = interview_age, y = thickness, color = centile, 
                           linetype = hemisphere), linewidth = 1.45)
  
  title <- if (race_input == "Other") {
    paste("Centile Curves for", sex_input,
      "Adolescents whose Race is not Listed (??)")
  }
  else {
    paste("Centile Curves for", race_input, sex_input, "Adolescents")
  }
  
  gg <- gg + 
    theme_minimal() + 
    labs(title = title)  + 
    scale_color_manual(
      values = c(`0.4` = "#A30015", `2` = "#E97451", `2.5` = "#FFD700", 
                 `10` = "#379634", `25` = "#124019", `50` = "#11686A",
                 `75` = "#08A4BD", `90` = "#C185B2", `97.5` = '#B91372',
                 `98` = '#63264A', `99.6` = '#E2B4BD')) + 
    theme(legend.position = "bottom") + 
    theme(plot.title = element_text(face = "italic", size = 18), 
          axis.title = element_text(size = 15), 
          axis.text = element_text(size = 13), 
          legend.text = element_text(size = 13), 
          legend.title = element_text(size = 15)) + 
    guides(linetype = hemi_legend) + 
    scale_x_continuous(breaks = c(108,120,132,144, 156, 168,180),
                     labels = c(9,10,11,12,13,14,15)) + 
    xlab("Adolescent Age (Years)") + 
    ylab("Cortical Thickness (mm)") 
  
  
  return(gg)
    }
```

```{r}
#| label: calculate-centile-function
#| context: setup

#function to calculate centile values

calculate_centile <- function(
  race_input,
  sex_input,
  age_input,
  region_input,
  hemisphere_input, 
  thickness_input,
  phenotype_input
  ) { 
  
  demog_brain_combos <- if (phenotype_input == "Cortical Thickness") { 
    demog_thick_combos_est
  } else {
      demog_area_combos_est
    }
  

  
  phenotype_parameters <- if (phenotype_input == "Cortical Thickness") { 
    thickness_parameters } 
  else { area_parameters}
  
  pfun <- if (phenotype_input == "Cortical Thickness") { 
    "pBCTo"} else { "pBCPEo"}
  
  # need to make provision for if user is looking at both hemispheres
  # (and not at the full brain)
  if (!(hemisphere_input == "right" | hemisphere_input == "left") &
          region_input != "all") { 
    
    indices <- which(
      demog_brain_combos$sex == sex_input &
      demog_brain_combos$race_ethnicity == race_input &
      demog_brain_combos$region == region_input)
    
    parameters_df <- list(
      phenotype_parameters[[indices[1]]], phenotype_parameters[[indices[2]]])
    
   }
  
  else { 
      
     index <- which(
        demog_brain_combos$sex == sex_input &
        demog_brain_combos$race_ethnicity == race_input &
        demog_brain_combos$region == region_input &
        demog_brain_combos$hemisphere == hemisphere_input)
  
    parameters_df <- list(phenotype_parameters[[index]])
    
  }
  
  #if we don't have parameters for the age input round down to the nearest age
  if (!(age_input %in% as.vector(parameters_df[[1]]$x))) {
    age_index <- which(abs(as.vector(parameters_df[[1]]$x) - age_input) == 
                           min(abs((parameters_df[[1]]$x - age_input))))
    
    age_input <- min(parameters_df[[1]]$x[age_index])
  } 
  
  #get index for specific age 
  age_index <- which(parameters_df[[1]]$x == age_input)
  
  final_centiles <- c()
  for (index in 1:length(parameters_df)) { 
    curr_param_df <- parameters_df[[index]]
    mu <- curr_param_df$mu[age_index]
    sigma <- curr_param_df$sigma[age_index] 
    nu <- curr_param_df$nu[age_index]
    tau <- curr_param_df$tau[age_index]
    
    curr_centile <- call(pfun, q = thickness_input, mu = mu, sigma = sigma,
                         nu = nu, tau = tau)
    curr_centile <- eval(curr_centile)
    curr_centile <- round(curr_centile, digits = 5)
    final_centiles[index] <- curr_centile*100
    
    }
  
  
  return(final_centiles)
  
}
```


```{r}
#| label: render-individualized-centile-plot
#| context: server

output$ctplot <- renderPlot({ 
  
  
  #initialize stuff
  timepoints <- c("baseline", "year 2", "year 4")
  values <- c(input$baseline_input, input$year2_input, input$year4_input)
  
  #define age in months
  
  baseline_age_input <- elapsed_months(input$baseline_date, input$birthday)
  year2_age <- elapsed_months(input$year2_date, input$birthday) 
  year4_age <- elapsed_months(input$year4_date, input$birthday)
  ages <- c(baseline_age_input, year2_age, year4_age)
  
  #extract the ages + centiles + values for which we will be calculating 
  
  value_indices <- as.vector(which(values != 0))
  timepoints <- timepoints[value_indices]
  values_calc <- values[value_indices]
  ages_calc <- ages[value_indices]
  race <- input$race 
  sex <- input$sex 
  region <- input$region 
  hemi <- input$hemi
  phenotype <- input$phenotype
  
  if (!(hemi %in% c("left", "right")) & region != "all") { 
    hemi_labels <- c("left", "right")}
  else { hemi_labels <- NULL}
  
  #provisions for diff plot sizes 
  
  label_spacer <- if (phenotype == "Cortical Thickness") { 
    c(0.1, -0.1) }
    else if (phenotype == "Cortical Surface Area" & region != "all") {
    c(100, -100) }
    else {c(10000, -10000)}
  
  
  #base centile plot 
  gg <- draw_centiles(
    race_input = race,
    sex_input = sex,
    hemisphere_input = hemi,
    region_input = region,
    centiles_input = input$centiles,
    phenotype_input = phenotype
    )
  
  
  #define centiles and round them to four digits and put them in a list 
  #if we're calculating both hemispheres then we want to do this for 
  centile_values <- c()
  
  if (length(value_indices) != 0) { 

    for (i in 1:length(value_indices)) { 
      curr_centile <- calculate_centile(
        race_input = race,
        sex_input = sex,
        age_input = ages_calc[i], 
        region_input = region,
        hemisphere_input = hemi,
        thickness_input = values_calc[i],
        phenotype_input = phenotype)
      curr_centile <- round(curr_centile, digits = 4)
      centile_values[[i]] <- curr_centile
    
      }
  
  # if we get both hemispheres it looks like  c([0.34, 1.290], [94, 32])
  #add user points & centile estimates to the plot 

    for (i in 1:length(value_indices)) { 
      timepoint <- timepoints[i]
      curr_centile <- centile_values[[i]]
    
      gg <- gg +
        annotate("point", x = ages_calc[i], y = values_calc[i], size = 3,
          color = "#05668D")
    
    #default is for the left centile label to be displayed above the right one
    #but if the left centile value is bigger it means that the left curve is below the right one so switch it to the bottom 
      if (length(curr_centile) > 1 & curr_centile[1] > curr_centile[2]) { 
        label_spacer <- list.reverse(label_spacer)}
    
      for (hemi_index in 1:length(hemi_labels)) { 
        gg <- gg +
          annotate("label", x = ages_calc[i], y = values_calc[i] +
            label_spacer[hemi_index], size = 5,
          label = (paste(timepoint, hemi_labels[hemi_index], "centile:", "\n",
                      curr_centile[hemi_index])))
      }
    }
    
    # and line segments connecting the points if we have 2+ points 
    if (length(value_indices) > 1) {
      for (i in 1:length(value_indices)-1) {
        gg <- gg +
          annotate("segment", x = ages_calc[i], y = values_calc[i],
            xend = ages_calc[i+1], yend = values_calc[i+1], color = "#4C4B63",
              size = 1.25, linetype = 3)
      }
    }
    
  }
  
  gg
  
  })
```

# Spatial Visualization

## {.sidebar}

```{r}
#| panel: sidebar
#| label: sidebar-brain-inputs

model_xvars <- c(107:189)

selectInput(
  inputId = "statistic", 
  label = "What do you want to see?", 
  choices = c("Scaled Regional Max Ratio", "Raw Data")
  )

sliderInput(
  "age",
  "Adolescent Age (months)",
  min = min(model_xvars),
  max = max(model_xvars),
  value = 120
  )

selectInput(
  inputId = "phenotype",
  label = "Phenotype",
  choices = c("Cortical Thickness", "Cortical Surface Area"),
  selected = "Cortical Thickness"
  )

checkboxGroupInput(
  inputId = "centiles",
  label = "Centile Selections",
  choices = c(0.4, 2, 2.5, 10, 25, 50, 75, 90, 97.5, 98, 99.6),
  selected = c(2.5, 50, 97.5)
  )

selectInput(
  inputId = "race", 
  label = "Race", 
  choices = c("White", "Black", "Hispanic", "Asian", "Other", "All"), 
  selected = "All"
  )

selectInput(
  inputId = "sex", 
  label = "Sex", 
  choices = c("Male", "Female"), 
  selected = "Female"
  )

selectInput(
  inputId = "hemi",
  label = "Hemisphere",
  choices = c("left", "right", "Both"),
  selected = c("Both")
  )

```

## Row {height=100%}

```{r}
#| label: output-spatial-visualizations
#| panel: fill

plotOutput('brainPlot')
```

```{r}
#| label: log-ratio-function
#| context: setup

log_ratio <- function(orig_df) {
  
 peak_df1 <- orig_df |> 
  group_by(region, hemisphere, sex, race) |> 
  pivot_longer(cols = `107`:`189`, names_to = "age", values_to = "value") |> 
  summarize(region_max = max(value, na.rm = TRUE),
            .groups = 'rowwise') |> 
  right_join(thickness_df, by = c("region", "sex", "race", "hemisphere"))

  long_df <- orig_df |>
    pivot_longer(cols = `107`:`189`, names_to = "age", values_to = "value") |>
    left_join(peak_df1 |> select(region, sex, race, hemisphere, centile, region_max), 
              by = c("region", "sex", "race", "hemisphere", "centile")) |>
    mutate(ratio = region_max / value)

  log_maxes <- long_df |>
    select(region, centile, hemisphere, sex, race, age, ratio) |>
    pivot_wider(names_from = age, values_from = ratio) |> 
    mutate(across(`107`:`189`, log, .names = "log_{.col}"))
  
  #final df
  final_df <- log_maxes |>
    select(region, hemisphere, sex, race, centile, starts_with("log_")) |> 
    rename_with(~ sub("^log_", "", .), starts_with("log_"))
  
  return(final_df)
}
```

```{r}
#| label: plot-centile-function-brains
#| context: setup

#makes a plot for a specific centile + race/sex combo 
plot_centile <- function(centile_input, age_input, race_input, sex_input, 
                         statistic_input, phenotype_input, hemi_input){ 

    #take log ratios
    thickness_logs <- log_ratio(thickness_df)
    area_logs <- log_ratio(area_df)  
  
 
  #define dataframe based on what user wants to see 
   working_df <- if (statistic_input == "Raw Data") {
    if(phenotype_input == "Cortical Thickness"){thickness_df
    }
    else {area_df}
    }
    else {
      if(phenotype_input == "Cortical Thickness"){
        thickness_logs
      }
      else {area_logs}
    }
   
  
  #define limits based on input 
  pheno_limits <- if (statistic_input == "Scaled Regional Max Ratio") { 
    if (phenotype_input == "Cortical Thickness") {
   c(0, 0.35) } else { c(0, 1)}
    } else if (phenotype_input == "Cortical Thickness") { 
    c(1.3, 4)
  } else { 
      c(0, 15000)}
  
  
  legend_name <- if(statistic_input == "Scaled Regional Max Ratio"){ 
    "log(max/centile value)"} else { 
      if(phenotype_input == "Cortical Thickness"){
        "cortical thickness (mm)"} 
      else{
        "cortical surface area (mm^2)"
      }
      }
  
   #define geom brain object depending on hemisphere input
  
   geom_brain_obj <- if (hemi_input == "Both") {
    geom_brain(atlas = dk, aes(fill = values))
  } else {
   geom_brain(atlas = dk, 
              hemi = as.character(hemi_input), 
               aes(fill = values))
  }
  
  working_df <- working_df |> 
    filter(race == race_input, sex == sex_input) |> 
    filter(centile == centile_input) 
  
  working_df$values <- working_df[[age_input]]
  
  

  #make title make sense for "2nd" 
  if(centile_input == 2){ 
    plot_title <- "2nd percentile"
    } else { plot_title <- paste(centile_input, "th percentile", sep = "")}
  
  plot <- working_df |> 
    ggplot() + 
    geom_brain_obj + 
    scale_fill_gradientn( 
      name = legend_name, 
      colors = turbo(45), 
      limits = pheno_limits) + 
    labs(title = plot_title) + 
    theme_void()
  
  
  return(plot)
  
  }
```

```{r}
#| label: plot-centiles-function-brains
#| context: setup

plot_centiles <- function(centiles_input, age_input, race_input, sex_input, 
                          statistic_input, phenotype_input, hemi_input){ 
  plot_outputs <- c()
  
  age_years <- round(as.numeric(age_input)/12, digits = 4)
  
  for(i in 1:length(centiles_input)){ 
    curr_centile <- centiles_input[i] 
    plot <- plot_centile(curr_centile, age_input, race_input, sex_input, 
                         statistic_input, phenotype_input, hemi_input)
    plot_outputs[[i]] <- plot
    }
  


  if(race_input == "All" & sex_input != "All") { 
    title <- paste("Centile Visualizations for all", sex_input, "Adolescents --", age_input, "Months")}
  if(race_input != "All" & sex_input != "All"){ 
    title <- paste("Centile Visualizations for", race_input, sex_input, "Adolescents --", age_years, "Years")}
  
  
  nCol = floor(sqrt(length(centiles_input)))
  #top_text <- text_grob(title, gp = gpar(fontsize = 15, font = 8))
  
  final_plot <- do.call("grid.arrange", 
                        c(plot_outputs, ncol=nCol, top = title))
  
  return(final_plot)
  
}
```

```{r}
#| context: server
#| label: render-brain-plots

output$brainPlot <- renderPlot({

  plot_centiles(
    centiles_input = input$centiles,
    age_input = as.character(input$age),
    race_input = input$race,
    sex_input = input$sex,
    statistic_input = input$statistic,
    phenotype_input = input$phenotype,
    hemi_input = input$hemi)
  })

```

# Cortical Thickness

## {.toolbar}

```{r}
#| label: thickness-global-input
#| title: "Select Options"
#| layout-nrow: 2
#| layout-ncol: 1

# select y variable
selectInput(
  "thickness_var",
  "Select area of brain to model cortical surface area: ",
  thickness_labels$var_label,
  selected = c("whole brain")
  )

# centile input boxes
checkboxGroupInput(
  "centiles_thickness",
  "Select Centiles to Include in Plot",
  c(0.4, 2, 2.5, 10, 25, 50, 75, 90, 97.5, 98, 99.6),
  selected = c(2.5, 50, 97.5),
  inline = TRUE
  )

```

## Row

```{r}
#| content: card-toolbar
#| label: thickness-plot-1-input

race_levels <- c(levels(brain_data$race_ethnicity), "All")

# select race
selectInput(
  "race3",
  "Race",
  choices = race_levels,
  multiple = FALSE,
  selected = "All"
)

# select sex
selectInput(
  "sex3",
  "Sex",
  choices = c("Male", "Female"),
  multiple = FALSE,
  selected = "Female"
)
```

```{r}
#| title: "Plot 1"
#| label: thickness-plot-1

plotOutput("thick_centile_plot_1")
```

```{r}
#| content: card-toolbar
#| label: thickness-plot-2-input

# select race
selectInput(
  "race4",
  "Race",
  choices = race_levels,
  multiple = FALSE,
  selected = "All"
)

# select sex
selectInput(
  "sex4",
  "Sex",
  choices = c("Male", "Female"),
  multiple = FALSE,
  selected = "Male"
)

```

```{r}
#| title: "Plot 2"
#| label: thickness-plot-2

plotOutput("thick_centile_plot_2")

```

```{r}
#| label: thickness-calculate-and-plot-centiles
#| context: server

output$thick_centile_plot_1 <- renderPlot({
  
  demog_brain_combos_thick <- as.data.frame(demog_brain_combos_thick)

  race3 <- input$race3[1]
  sex3 <- input$sex3[1]

  centiles_to_plot <- as.numeric(input$centiles_thickness)
  region_label <-  input$thickness_var[1]
  region_var <- thickness_labels$var_name[which(thickness_labels$var_label == region_label)]
  
  index <- which(demog_brain_combos_thick$sex == sex3 & demog_brain_combos_thick$race_ethnicity == race3 & demog_brain_combos_thick$var_label == region_label)

  demog_brain_combos_thick <- as.matrix(demog_brain_combos_thick)

  y_limits <- c(as.numeric(demog_brain_combos_thick[index, 5]),
                as.numeric(demog_brain_combos_thick[index, 6]))
  
  model_data <- thick_data_list[[index]]
  model_obj <- thick_model_list[[index]]
  
  centiles_plot(
    model_obj,
    model_data,
    xcol = substitute(interview_age),
    ycol = region_var,
    cent = centiles_to_plot,
    race = race3,
    sex = sex3,
    ylims = y_limits,
    region = region_label
  )
  
})

output$thick_centile_plot_2 <- renderPlot({
  
  demog_brain_combos_thick <- as.data.frame(demog_brain_combos_thick)

  race4 <- input$race4[1]
  sex4 <- input$sex4[1]

  centiles_to_plot <- as.numeric(input$centiles_thickness)
  region_label <-  input$thickness_var[1]
  region_var <- thickness_labels$var_name[which(thickness_labels$var_label == region_label)]
  
  index <- which(demog_brain_combos_thick$sex == sex4 & demog_brain_combos_thick$race_ethnicity == race4 & demog_brain_combos_thick$var_label == region_label)

  demog_brain_combos_thick <- as.matrix(demog_brain_combos_thick)

  y_limits <- c(as.numeric(demog_brain_combos_thick[index, 5]),
                as.numeric(demog_brain_combos_thick[index, 6]))
  
  model_data <- thick_data_list[[index]]
  model_obj <- thick_model_list[[index]]
  
  centiles_plot(
    model_obj,
    model_data,
    xcol = substitute(interview_age),
    ycol = region_var,
    cent = centiles_to_plot,
    race = race4,
    sex = sex4,
    ylims = y_limits,
    region = region_label
  )
  
})
```


# Cortical Surface Area

## {.toolbar}

```{r}
#| title: "Select Options"
#| layout-nrow: 2
#| layout-ncol: 1
#| label: area-global-input

# select y variable
selectInput(
  "area_var",
  "Select area of brain to model cortical surface area: ",
  area_vars,
  selected = c("whole brain ")
  )

# centile input boxes
checkboxGroupInput(
  "centiles_area",
  "Select Centiles to Include in Plot",
  c(0.4, 2, 2.5, 10, 25, 50, 75, 90, 97.5, 98, 99.6),
  selected = c(2.5, 50, 97.5),
  inline = TRUE
  )

```

## Row

```{r}
#| content: card-toolbar
#| label: area-plot-1-input

# select race
selectInput(
  "race1",
  "Race",
  choices = race_levels,
  multiple = FALSE,
  selected = "All"
)

# select sex
selectInput(
  "sex1",
  "Sex",
  choices = c("Male", "Female"),
  multiple = FALSE,
  selected = "Female"
)
```

```{r}
#| title: "Plot 1"
#| label: area-plot-1

plotOutput("area_centile_plot_1")

```

```{r}
#| content: card-toolbar
#| label: area-plot-2-input

# select race
selectInput(
  "race2",
  "Race",
  choices = race_levels,
  multiple = FALSE,
  selected = "All"
)

# select sex
selectInput(
  "sex2",
  "Sex",
  choices = c("Male", "Female"),
  multiple = FALSE,
  selected = "Male"
)

```

```{r}
#| title: "Plot 2"
#| label: area-plot-2

plotOutput("area_centile_plot_2")
```

```{r}
#| label: area-calculate-and-plot-centiles
#| context: server

output$area_centile_plot_1 <- renderPlot({
  
  demog_brain_combos_area <- as.data.frame(demog_brain_combos_area)

  race1 <- input$race1[1]
  sex1 <- input$sex1[1]
  centiles_to_plot <- as.numeric(input$centiles_area)
  region_label <- input$area_var[1]
  region_var <- area_labels$var_name[which(area_labels$var_label == region_label)]
  
  index <- which(demog_brain_combos_area$sex == sex1 & demog_brain_combos_area$race_ethnicity == race1 & demog_brain_combos_area$brain_location == region_label)

  demog_brain_combos_area <- as.matrix(demog_brain_combos_area)

  y_limits <- c(as.numeric(demog_brain_combos_area[index, 5]),
                as.numeric(demog_brain_combos_area[index, 6]))
  
  model_data <- data_list[[index]]
  model_obj <- model_list[[index]]
  
  centiles_plot(
    model_obj,
    model_data,
    xcol = substitute(interview_age),
    ycol = region_var,
    cent = centiles_to_plot,
    race = race1,
    sex = sex1,
    ylims = y_limits,
    region = region_label
  )
  
})

output$area_centile_plot_2 <- renderPlot({
  
  demog_brain_combos_area <- as.data.frame(demog_brain_combos_area)
  race2 <- input$race2[1]
  sex2 <- input$sex2[1]
  centiles_to_plot <- as.numeric(input$centiles_area)
  region_label <- input$area_var[1]
  region_var <- area_labels$var_name[which(area_labels$var_label == region_label)]
  
  index <- which(
    demog_brain_combos_area$sex == sex2 &
      demog_brain_combos_area$race_ethnicity == race2 &
      demog_brain_combos_area$brain_location == region_label)
  
  y_limits <- c(as.numeric(demog_brain_combos_area[index, 5]),
                as.numeric(demog_brain_combos_area[index, 6]))
  
  model_data <- data_list[[index]]
  model_obj <- model_list[[index]]
  
  centiles_plot(
    model_obj,
    model_data,
    xcol = substitute(interview_age),
    ycol = region_var,
    cent = centiles_to_plot,
    race = race2,
    sex = sex2,
    ylims = y_limits,
    region = region_label
  )
  
})
```

# About Us
